{"version":3,"file":"timeline.min.js","sources":["../src/consts.ts","../src/utils.ts","../src/dblcheck.ts","../src/HeaderAreaStructure.ts","../src/KeytimesStructure.ts","../src/KeyframesStructure.ts","../src/ScrollAreaStructure.ts","../src/PropertiesStructure.ts","../src/ValuesStructure.ts","../src/Info.ts","../src/TimelineInfo.ts","../src/Timeline.ts","../src/ControlAreaStructure.ts"],"sourcesContent":["export const PREFIX = `scenejs_editor_`;\n\nexport const CSS2 = `\n.item_info {\n    position: fixed;\n    right: 0;\n    top: 0;\n    width: 200px;\n    background: #000;\n}\n.options_area {\n\n}\n.option_area {\n    position: relative;\n    border-bottom: 1px solid #777;\n    box-sizing: border-box;\n    white-space: nowrap;\n    background: rgba(90, 90, 90, 0.7);\n    font-size: 13px;\n    font-weight: bold;\n    color: #eee;\n    display: flex;\n}\n.option_name, .option_value {\n    width: 50%;\n    height: 30px;\n    line-height: 20px;\n    box-sizing: border-box;\n    padding: 5px;\n}\n.option_name {\n    border-right: 1px solid #999;\n}\n.option_value input {\n    appearance: none;\n    -webkit-appearance: none;\n    outline: none;\n    position: relative;\n    display: block;\n    width: 100%;\n    height: 100%;\n    background: transparent;\n    color: #4af;\n    font-weight: bold;\n    background: none;\n    border: 0;\n    box-sizing: border-box;\n}\n`.replace(/\\.([^{,\\s\\d.]+)/g, `.${PREFIX}$1`);\n\nexport const CSS = `\n.timeline {\n  position: fixed;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  font-size: 0;\n  background: #000;\n  display: flex;\n  flex-direction: column;\n}\n.header_area, .scroll_area {\n   width: 100%;\n   position: relative;\n  display: flex;\n  -webkit-align-items: flex-start;\n  align-items: flex-start;\n}\n.header_area {\n  position: relative;\n  z-index: 10;\n  top: 0;\n  height: 30px;\n  min-height: 30px;\n}\n.header_area .keyframes {\n  padding: 0px;\n}\n.header_area .properties_area,\n.header_area .keyframes_area,\n.header_area .values_area,\n.header_area .keyframes_scroll_area {\n    height: 100%;\n}\n.header_area .property, .header_area .value, .header_area .keyframes {\n  height: 100%;\n}\n.header_area .property {\n    line-height: 30px;\n}\n.header_area .value {\n    text-align: center;\n    color: #fff;\n    line-height: 30px;\n    font-weight: bold;\n    font-size: 20px;\n}\n.header_area .keyframes_area::-webkit-scrollbar {\n    display: none; // Safari and Chrome\n}\n.header_area .keyframe_cursor {\n    position: absolute;\n    border-top: 10px solid #4af;\n    border-left: 6px solid transparent;\n    border-right: 6px solid transparent;\n    width: 0;\n    height: 0;\n    bottom: 0;\n    top: auto;\n    background: none;\n    cursor: pointer;\n}\n.control_area .keyframes {\n    padding-left: 10px;\n}\n.play_control_area {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n}\n.play_control_area .control {\n    position: relative;\n    display: inline-block;\n    vertical-align: middle;\n    color: white;\n    margin: 0px 15px;\n}\n.play {\n    border-left: 14px solid white;\n    border-top: 8px solid transparent;\n    border-bottom: 8px solid transparent;\n}\n.pause {\n    border-left: 4px solid #fff;\n    border-right: 4px solid #fff;\n    width: 6px;\n    height: 16px;\n}\n.prev {\n    border-right: 10px solid white;\n    border-top: 6px solid transparent;\n    border-bottom: 6px solid transparent;\n}\n.prev:before {\n    position: absolute;\n    content: \"\";\n    width: 3px;\n    height: 10px;\n    top: 0;\n    right: 100%;\n    transform: translate(0, -50%);\n    background: white;\n}\n.next {\n    border-left: 10px solid white;\n    border-top: 6px solid transparent;\n    border-bottom: 6px solid transparent;\n}\n.next:before {\n    position: absolute;\n    content: \"\";\n    width: 3px;\n    height: 10px;\n    top: 0;\n    transform: translate(0, -50%);\n    background: white;\n}\n.keytime {\n  position: relative;\n  display: inline-block;\n  height: 100%;\n  font-size: 13px;\n  font-weight: bold;\n  color: #777;\n}\n.keytime:last-child {\n  max-width: 0px;\n}\n.keytime span {\n  position: absolute;\n  top: 2px;\n  left: 0;\n  display: inline-block;\n  transform: translate(-50%);\n  color: #eee;\n}\n.keytime .graduation {\n  position: absolute;\n  bottom: 0;\n  width: 1px;\n  height: 10px;\n  background: #777;\n  transform: translate(-50%);\n}\n.keytime .graduation.half {\n  left: 50%;\n  height: 7px;\n}\n.keytime .graduation.quarter {\n  left: 25%;\n  height: 5px;\n}\n.keytime .graduation.quarter3 {\n  left: 75%;\n  height: 5px;\n}\n.scroll_area {\n  position: relative;\n  width: 100%;\n  height: calc(100% - 60px);\n  overflow: auto;\n}\n.properties_area, .keyframes_area, .values_area {\n  display: inline-block;\n  position: relative;\n  font-size: 16px;\n  overflow: auto;\n}\n\n.properties_area::-webkit-scrollbar, .keyframes_area::-webkit-scrollbar {\n    display: none; // Safari and Chrome\n}\n.properties_area {\n  width: 30%;\n  max-width: 200px;\n  box-sizing: border-box;\n}\n.values_area {\n    width: 50px;\n    min-width: 50px;\n    display: inline-block;\n    border-right: 1px solid #999;\n    box-sizing: border-box;\n}\n.value input {\n    appearance: none;\n    -webkit-appearance: none;\n    outline: none;\n    position: relative;\n    display: block;\n    width: 100%;\n    height: 100%;\n    background: transparent;\n    color: #4af;\n    font-weight: bold;\n    background: none;\n    border: 0;\n    box-sizing: border-box;\n    text-align: center;\n}\n.alt .value input {\n    cursor: ew-resize;\n}\n.value[data-object=\"1\"] input {\n    display: none;\n}\n.properties_scroll_area {\n  display: inline-block;\n  min-width: 100%;\n}\n.keyframes_area {\n  flex: 1;\n}\n.keyframes_scroll_area {\n  position: relative;\n  min-width: 300px;\n}\n.keyframes, .property, .value {\n  position: relative;\n  height: 25px;\n  border-bottom: 1px solid #777;\n  box-sizing: border-box;\n  white-space: nowrap;\n  background: rgba(90, 90, 90, 0.7);\n  z-index: 1;\n}\n\n.property {\n  line-height: 25px;\n  padding-left: 10px;\n  box-sizing: border-box;\n  font-size: 13px;\n  font-weight: bold;\n  color: #eee;\n}\n.time_area {\n    font-size: 13px;\n    color: #4af;\n    line-height: 30px;\n    font-weight: bold;\n    height: 100%;\n    line-height: 30px;\n    border: 0;\n    background: transparent;\n    outline: 0;\n}\n.time_area:after {\n    content: \"s\";\n}\n.property .arrow {\n    position: relative;\n    display: inline-block;\n    margin-right: 5px;\n    width: 0;\n    vertical-align: middle;\n    cursor: pointer;\n    border-top: 6px solid #eee;\n    border-left: 4px solid transparent;\n    border-right: 4px solid transparent;\n}\n.property[data-fold=\"1\"] .arrow {\n    border-top: 4px solid transparent;\n    border-bottom: 4px solid transparent;\n    border-right: 0;\n    border-left: 6px solid #eee;\n    margin-left: 2px;\n}\n.property[data-object=\"0\"] .arrow {\n    display: none;\n}\n.property.fold, .keyframes.fold, .value.fold {\n    display: none;\n}\n.property.select, .value.select, .keyframes.select {\n    background: rgba(120, 120, 120, 0.7);\n}\n.keyframes {\n\n}\n.keyframe_delay {\n  position: absolute;\n  height: 100%;\n  top: 0;\n  left: 0;\n  background: #4af;\n  opacity: 0.2;\n  z-index: 0;\n}\n.keyframe_line {\n  position: absolute;\n  height: 8px;\n  top: 0;\n  bottom: 0;\n  margin: auto;\n  background: #666;\n  z-index: 0;\n}\n.keyframe {\n  position: absolute;\n  font-size: 0px;\n  width: 12px;\n  height: 12px;\n  top: 0px;\n  bottom: 0px;\n  margin: auto;\n  background: #fff;\n  border: 2px solid #383838;\n  border-radius: 2px;\n  box-sizing: border-box;\n  transform: translate(-50%) rotate(45deg);\n  z-index: 1;\n  cursor: pointer;\n}\n.keyframe[data-no=\"1\"] {\n    opacity: 0.2;\n}\n.select .keyframe {\n    border-color: #555;\n}\n.keyframe.select {\n    background: #4af;\n}\n.keyframes_container, .line_area {\n  position: relative;\n  width: calc(100% - 30px);\n  left: 15px;\n  height: 100%;\n}\n.line_area {\n  position: absolute;\n  top: 0;\n  z-index: 0;\n}\n.keyframe_cursor {\n  position: absolute;\n  top: 0;\n  z-index: 1;\n  background: #4af;\n  width: 1px;\n  height: 100%;\n  left: 15px;\n  transform: translate(-50%);\n}\n.division_line {\n  position: absolute;\n  background: #333;\n  width: 1px;\n  height: 100%;\n  transform: translate(-50%);\n}\n`.replace(/\\.([^{,\\s\\d.]+)/g, `.${PREFIX}$1`);\n\nexport const DURATION = \"duration\";\nexport const FILL_MODE = \"fillMode\";\nexport const DIRECTION = \"direction\";\nexport const ITERATION_COUNT = \"iterationCount\";\nexport const DELAY = \"delay\";\nexport const EASING = \"easing\";\nexport const PLAY_SPEED = \"playSpeed\";\nexport const EASING_NAME = \"easingName\";\nexport const ITERATION_TIME = \"iterationTime\";\nexport const PAUSED = \"paused\";\nexport const ENDED = \"ended\";\nexport const TIMEUPDATE = \"timeupdate\";\nexport const ANIMATE = \"animate\";\nexport const PLAY = \"play\";\nexport const RUNNING = \"running\";\nexport const ITERATION = \"iteration\";\nexport const START_ANIMATION = \"startAnimation\";\nexport const PAUSE_ANIMATION = \"pauseAnimation\";\nexport const ALTERNATE = \"alternate\";\nexport const REVERSE = \"reverse\";\nexport const ALTERNATE_REVERSE = \"alternate-reverse\";\nexport const NORMAL = \"normal\";\nexport const INFINITE = \"infinite\";\nexport const PLAY_STATE = \"playState\";\nexport const PLAY_CSS = \"playCSS\";\nexport const PREV_TIME = \"prevTime\";\nexport const TICK_TIME = \"tickTime\";\nexport const CURRENT_TIME = \"currentTime\";\nexport const SELECTOR = \"selector\";\nexport const TRANSFORM_NAME = \"transform\";\n","import { PREFIX } from \"./consts\";\nimport Scene, { SceneItem, Frame } from \"scenejs\";\nimport {\n    hasClass as hasClass2,\n    addClass as addClass2,\n    removeClass as removeClass2,\n    IObject,\n    isObject,\n    isArray,\n    isUndefined,\n} from \"@daybrush/utils\";\nimport { ElementStructure, TimelineInfo } from \"./types\";\n\nexport function numberFormat(num: number, count: number, isRight?: boolean) {\n    const length = `${num}`.length;\n    const arr = [];\n\n    if (isRight) {\n        arr.push(num);\n    }\n    for (let i = length; i < count; ++i) {\n        arr.push(0);\n    }\n    if (!isRight) {\n        arr.push(num);\n    }\n    return arr.join(\"\");\n}\nexport function applyStyle(el: HTMLElement, style: IObject<any>) {\n    for (const name in style) {\n        el.style[name] = style[name];\n    }\n}\nexport function findIndexByProperty(selectedProperty: string, structures: ElementStructure[]) {\n    return structures.findIndex(\n        ({ dataset: { key } }) => key === selectedProperty,\n    );\n}\n\nexport function createElement(structure: ElementStructure) {\n    const { selector, dataset, attr, style, html } = structure;\n\n    const classNames = selector.match(/\\.([^.#\\s])+/g) || [];\n    const tag = (selector.match(/^[^.#\\s]+/g) || [])[0] || \"div\";\n    const id = (selector.match(/#[^.#\\s]+/g) || [])[0] || \"\";\n    const el = document.createElement(tag);\n\n    id && (el.id = id.replace(/^#/g, \"\"));\n    el.className = classNames.map(name => `${PREFIX}${name.replace(/^\\./g, \"\")}`).join(\" \");\n\n    if (dataset) {\n        for (const name in dataset) {\n            el.setAttribute(`data-${name}`, dataset[name]);\n        }\n    }\n    if (attr) {\n        for (const name in attr) {\n            el.setAttribute(name, attr[name]);\n        }\n    }\n    if (style) {\n        applyStyle(el, style);\n    }\n    if (html) {\n        el.innerHTML = html;\n    }\n    return el;\n}\nexport function updateElement(prevStructure: ElementStructure, nextStructure: ElementStructure) {\n    const { dataset, attr, style, html, element } = nextStructure;\n    if (dataset) {\n        for (const name in dataset) {\n            element.setAttribute(`data-${name}`, dataset[name]);\n        }\n    }\n    if (attr) {\n        for (const name in attr) {\n            element.setAttribute(name, attr[name]);\n        }\n    }\n    style && applyStyle(element, style);\n    if (prevStructure.html !== nextStructure.html) {\n        element.innerHTML = html;\n    }\n}\nexport function keys(value: object) {\n    const arr = [];\n    for (const name in value) {\n        arr.push(name);\n    }\n    return arr;\n}\nexport function toValue(value: any) {\n    const type = typeof value;\n    if (type === \"object\") {\n        if (Array.isArray(value)) {\n            return `[${value.join(\", \")}]`;\n        }\n        return `{${keys(value).map(k => `${k}: ${toValue(value[k])}`).join(\", \")}}`;\n    }\n    return value;\n}\nexport function flatObject(obj: IObject<any>, newObj: IObject<any> = {}) {\n\n    for (const name in obj) {\n        const value = obj[name];\n\n        if (isObject(value)) {\n            const nextObj = flatObject(isFrame(value) ? value.get() : value);\n\n            for (const nextName in nextObj) {\n                newObj[`${name}///${nextName}`] = nextObj[nextName];\n            }\n        } else {\n            newObj[name] = value;\n        }\n    }\n    return newObj;\n}\n\nexport function getTarget<T extends HTMLElement>(target: T, conditionCallback: (el: Element) => boolean): T {\n    let parentTarget = target;\n\n    while (parentTarget && parentTarget !== document.body) {\n        if (conditionCallback(parentTarget)) {\n            return parentTarget;\n        }\n        parentTarget = parentTarget.parentNode as T;\n    }\n    return null;\n}\n\nexport function hasClass(target: Element, className: string) {\n    return hasClass2(target, `${PREFIX}${className}`);\n}\nexport function addClass(target: Element, className: string) {\n    return addClass2(target, `${PREFIX}${className}`);\n}\nexport function removeClass(target: Element, className: string) {\n    return removeClass2(target, `${PREFIX}${className}`);\n}\nexport function findStructure(\n    selector: string,\n    structure: ElementStructure | ElementStructure[],\n    multi: true,\n    arr?: ElementStructure[],\n): ElementStructure[];\nexport function findStructure(\n    selector: string,\n    structure: ElementStructure | ElementStructure[],\n    multi?: false,\n    arr?: ElementStructure[],\n): ElementStructure;\nexport function findStructure(\n    selector: string,\n    structure: ElementStructure | ElementStructure[],\n    multi: true | false,\n    arr?: ElementStructure[],\n): ElementStructure | ElementStructure[];\nexport function findStructure(\n    selector: string,\n    structure: ElementStructure | ElementStructure[],\n    multi: boolean = false,\n    arr: ElementStructure[] = [],\n): ElementStructure | ElementStructure[] {\n    if (isArray(structure)) {\n        const length = structure.length;\n\n        for (let i = 0; i < length; ++i) {\n            findStructure(selector, structure[i], multi, arr);\n        }\n    } else {\n        if (structure.selector === selector) {\n            arr.push(structure);\n        }\n        if (!multi && arr.length) {\n            return arr[0];\n        }\n        if (structure.children) {\n            findStructure(selector, structure.children, multi, arr);\n        }\n    }\n    return multi ? arr : arr[0];\n}\nexport function isScene(value: any): value is Scene {\n    return !!(value.constructor as typeof Scene).prototype.getItem;\n}\nexport function isSceneItem(value: any): value is SceneItem {\n    return !!(value.constructor as typeof SceneItem).prototype.getFrame;\n}\nexport function isFrame(value: any): value is Frame {\n    return !!(value.constructor as typeof Frame).prototype.toCSS;\n}\nexport function splitProperty(scene: Scene, property: string) {\n    const names = property.split(\"///\");\n    const length = names.length;\n    let item: Scene | SceneItem = scene;\n    let i;\n\n    for (i = 0; i < length; ++i) {\n        if (isSceneItem(item)) {\n            break;\n        }\n        item = scene.getItem(names[i]);\n    }\n    return {\n        item: item as SceneItem,\n        names: names.slice(0, i),\n        properties: names.slice(i),\n    };\n}\nexport function getSceneItem(scene: Scene, names: string[]): SceneItem {\n    return names.reduce<any>(\n        (nextScene, name) => nextScene.getItem(name),\n        scene,\n    );\n}\n\nexport function findElementIndexByPosition(elements: HTMLElement[], pos: number): number {\n    const length = elements.length;\n\n    for (let index = 0; index < length; ++index) {\n        const el = elements[index];\n        const box = el.getBoundingClientRect();\n        const top = box.top;\n        const bottom = top + box.height;\n\n        if (top <= pos && pos < bottom) {\n            return index;\n        }\n    }\n    return -1;\n}\n","import { now } from \"@daybrush/utils\";\n\nlet prevTime = 0;\nlet prevX = -1;\nlet prevY = -1;\n\nexport function dblCheck(\n    isDrag: boolean,\n    e: any,\n    clientX: number,\n    clientY: number,\n    callback: (e: any, clientX: number, clientY: number) => void,\n) {\n    const currentTime = now();\n\n    if (!isDrag) {\n        if (\n            prevX === clientX &&\n            prevY === clientY &&\n            currentTime - prevTime <= 500\n        ) {\n            callback(e, clientX, clientY);\n        }\n        prevX = clientX;\n        prevY = clientY;\n        prevTime = currentTime;\n    }\n}\n","import { getKeytimesStructure } from \"./KeytimesStructure\";\nimport { Ids, ElementStructure } from \"./types\";\n\nexport function getHeaderAreaStructure(ids: Ids, zoom: number, maxDuration: number, maxTime: number): ElementStructure {\n    return {\n        selector: \".header_area\",\n        ref: e => {\n            ids.keyframesScrollAreas = [];\n            ids.keyframesAreas = [];\n            ids.propertiesAreas = [];\n        },\n        children: [\n            {\n                ref: (e: ElementStructure) => {\n                    ids.propertiesAreas[0] = e;\n                },\n                selector: \".properties_area\",\n                children: [\n                    {\n                        selector: \".property\",\n                        html: \"Name\",\n                    },\n                ],\n            },\n            {\n                selector: \".values_area\",\n                children: {\n                    selector: \".value\",\n                    html: \"+\",\n                },\n            },\n            getKeytimesAreaStructure(ids, zoom, maxDuration, maxTime),\n        ],\n    };\n}\n\nexport function getKeytimesAreaStructure(\n    ids: Ids,\n    zoom: number,\n    maxDuration: number,\n    maxTime: number,\n): ElementStructure {\n    return {\n        ref: e => {\n            ids.keyframesAreas[0] = e;\n        },\n        selector: \".keyframes_area\",\n        children: {\n            style: {\n                minWidth: `${50 * maxTime}px`,\n                width: `${Math.min(maxDuration ? maxTime / maxDuration : 1, 2) * zoom * 100}%`,\n            },\n            dataset: {\n                width: Math.min(maxDuration ? maxTime / maxDuration : 1, 2),\n            },\n            ref: (e: ElementStructure) => {\n                ids.keyframesScrollAreas[0] = e;\n            },\n            selector: \".keyframes_scroll_area\",\n            children: {\n                ref: e => {\n                    ids.cursors = [];\n                },\n                selector: \".keyframes\",\n                children: [\n                    {\n                        ref: e => {\n                            ids.keytimesContainer = e;\n                        },\n                        selector: \".keyframes_container\",\n                        children: getKeytimesStructure(maxTime),\n                    },\n                    {\n                        selector: \".keyframe_cursor\",\n                        ref: e => {\n                            ids.cursors[0] = e;\n                        },\n                    },\n                ],\n            },\n        },\n    };\n}\n","export function getKeytimesStructure(maxTime: number) {\n    const keytimes = [];\n\n    for (let time = 0; time <= maxTime; ++time) {\n        keytimes.push({\n            key: time,\n            dataset: {\n                time,\n            },\n            selector: \".keytime\",\n            style: {\n                width: `${100 / maxTime}%`,\n            },\n            children: [\n                {\n                    selector: \"span\",\n                    html: `${time}`,\n                },\n                {selector: \".graduation.start\"},\n                {selector: \".graduation.quarter\"},\n                {selector: \".graduation.half\"},\n                {selector: \".graduation.quarter3\"},\n            ],\n        });\n    }\n    return keytimes;\n}\nexport function getLinesStructure(maxTime: number) {\n    const lines = [];\n\n    for (let time = 0; time <= maxTime; ++time) {\n        lines.push({\n            key: time,\n            selector: \".division_line\",\n            style: {\n                left: `${100 / maxTime * time}%`,\n            },\n        });\n    }\n    return lines;\n}\n","import { toValue, applyStyle } from \"./utils\";\nimport { ElementStructure, Ids, TimelineInfo, PropertiesInfo } from \"./types\";\nimport { getLinesStructure } from \"./KeytimesStructure\";\nimport { isUndefined } from \"@daybrush/utils\";\n\nexport function updateKeyframesStructure(keyframes: ElementStructure[], maxTime: number) {\n    keyframes.forEach(keyframe => {\n        const {selector, dataset, style, element} = keyframe;\n        if (selector === \".keyframe\") {\n            style.left = `${dataset.time / maxTime * 100}%`;\n        } else {\n            style.left = `${dataset.from / maxTime * 100}%`,\n            style.width = `${(dataset.to - dataset.from) / maxTime * 100}%`;\n        }\n        applyStyle(element, style);\n    });\n}\n\nexport function getKeyframesAreaStructure(\n    ids: Ids,\n    keyframesList: ElementStructure[],\n    zoom: number,\n    maxDuration: number,\n    maxTime: number,\n): ElementStructure {\n    const width = Math.min(maxDuration ? maxTime / maxDuration : 1, 2);\n    return {\n        ref: e => {\n            ids.keyframesAreas[1] = e;\n        },\n        selector: \".keyframes_area\",\n        children: {\n            style: {\n                minWidth: `${50 * maxTime}px`,\n                width: `${width * zoom * 100}%`,\n            },\n            dataset: {\n                width,\n            },\n            ref: e => {\n                ids.keyframesScrollAreas[1] = e;\n            },\n            selector: \".keyframes_scroll_area\",\n            children: getKeyframesScrollAreaChildrenStructure(ids, keyframesList, maxTime),\n        },\n    };\n}\nexport function getKeyframesScrollAreaChildrenStructure(\n    ids: Ids,\n    keyframesList: ElementStructure[],\n    maxTime: number,\n): ElementStructure[] {\n    return [\n        ...keyframesList,\n        {\n            key: \"cursor\",\n            selector: \".keyframe_cursor\",\n            ref: e => {\n                ids.cursors[1] = e;\n            },\n        },\n        {\n            key: \"lineArea\",\n            ref: e => {\n                ids.lineArea = e;\n            },\n            selector: \".line_area\",\n            children: getLinesStructure(maxTime),\n        },\n    ];\n}\nexport function getKeyframesListStructure(\n    ids: Ids,\n    timelineInfo: TimelineInfo,\n    maxTime: number,\n): ElementStructure[] {\n    const keyframesList: ElementStructure[] = [];\n\n    for (const key in timelineInfo) {\n        const propertiesInfo = timelineInfo[key];\n        const keyframes = getKeyframesStructure(propertiesInfo, maxTime);\n\n        keyframesList.push({\n            ref: (e, i) => {\n                ids.keyframesList[i] = e;\n                ids.keyframesContainers[i] = e.children as ElementStructure;\n            },\n            selector: \".keyframes\",\n            key,\n            dataset: {\n                key,\n            },\n            datas: propertiesInfo,\n            children: {\n                selector: \".keyframes_container\",\n                children: keyframes,\n            },\n        });\n    }\n    return keyframesList;\n}\nexport function getDelayFrameStructure(\n    time: number,\n    nextTime: number,\n    maxTime: number,\n): ElementStructure {\n    return {\n        selector: \".keyframe_delay\",\n        key: `delay${time},${nextTime}`,\n        datas: {\n            time: -1,\n        },\n        style: {\n            left: `${time / maxTime * 100}%`,\n            width: `${(nextTime - time) / maxTime * 100}%`,\n        },\n    };\n}\nexport function getKeyframesStructure(\n    propertiesInfo: PropertiesInfo,\n    maxTime: number,\n): ElementStructure[] {\n    const keyframeLines: ElementStructure[] = [];\n    const duration = propertiesInfo.item.getDuration();\n    const frames = propertiesInfo.frames;\n    const delayFrames: ElementStructure[] = [];\n\n    const keyframes: ElementStructure[] = frames.map(([time, iterationTime, value], i): ElementStructure => {\n        const valueText = toValue(value);\n\n        if (frames[i + 1]) {\n            const [nextTime, nextIterationTime, nextValue] = frames[i + 1];\n            const nextValueText = toValue(nextValue);\n\n            if (\n                (iterationTime === 0 && nextIterationTime === 0)\n                || (iterationTime === duration && nextIterationTime === duration)\n            ) {\n                delayFrames.push(\n                    getDelayFrameStructure(time, nextTime, maxTime),\n                );\n            }\n            if (!isUndefined(value) && !isUndefined(nextValue) && valueText !== nextValueText) {\n                keyframeLines.push({\n                    selector: \".keyframe_line\",\n                    key: `${time},${nextTime}`,\n                    datas: {\n                        time: `${time},${nextTime}`,\n                        from: time,\n                        to: nextTime,\n                    },\n                    style: {\n                        left: `${time / maxTime * 100}%`,\n                        width: `${(nextTime - time) / maxTime * 100}%`,\n                    },\n                });\n            }\n        }\n\n        return {\n            key: time,\n            selector: \".keyframe\",\n            dataset: {\n                time,\n            },\n            datas: {\n                time,\n                iterationTime,\n                value: valueText,\n            },\n            style: {\n                left: `${time / maxTime * 100}%`,\n            },\n            html: `${time} ${valueText}`,\n        };\n    });\n\n    return [...keyframes, ...delayFrames, ...keyframeLines];\n}\n","import { getKeyframesAreaStructure, getKeyframesListStructure } from \"./KeyframesStructure\";\nimport { ElementStructure, Ids, TimelineInfo } from \"./types\";\nimport { getPropertiesStructure } from \"./PropertiesStructure\";\nimport { getValuesStructure } from \"./ValuesStructure\";\n\nexport function getScrollAreaStructure(\n    ids: Ids,\n    timelineInfo: TimelineInfo,\n    zoom: number,\n    maxDuration: number,\n    maxTime: number,\n): ElementStructure {\n    const keyframesList: ElementStructure[] = getKeyframesListStructure(ids, timelineInfo, maxTime);\n\n    return {\n        ref: e => {\n            ids.scrollArea = e;\n            ids.keyframesList = [];\n            ids.keyframesContainers = [];\n        },\n        selector: \".scroll_area\",\n        children: [\n            {\n                ref: e => {\n                    ids.propertiesAreas[1] = e;\n                    ids.properties = [];\n                },\n                selector: \".properties_area\",\n                children: [\n                    {\n                        selector: \".properties_scroll_area\",\n                        children: getPropertiesStructure(ids, timelineInfo),\n                    },\n                ],\n            },\n            {\n                ref: e => {\n                    ids.valuesArea = e;\n                    ids.values = [];\n                },\n                selector: \".values_area\",\n                children: getValuesStructure(ids, timelineInfo),\n            },\n            getKeyframesAreaStructure(ids, keyframesList, zoom, maxDuration, maxTime),\n        ],\n    };\n}\n","import { ElementStructure, Ids, TimelineInfo } from \"./types\";\n\nexport function getPropertiesStructure(ids: Ids, timelineInfo: TimelineInfo) {\n    const properties: ElementStructure[] = [];\n\n    for (const key in timelineInfo) {\n        const propertiesInfo = timelineInfo[key];\n        const propertyNames = key.split(\"///\");\n        const length = propertyNames.length;\n        const id = propertyNames[length - 1];\n\n        properties.push({\n            ref: (e, i) => {\n                ids.properties[i] = e;\n            },\n            key,\n            selector: \".property\",\n            dataset: {\n                key,\n                object: propertiesInfo.isParent ? \"1\" : \"0\",\n            },\n            datas: propertiesInfo,\n            style: {\n                paddingLeft: `${10 + (length - 1) * 20}px`,\n            },\n            children: [\n                { selector: \".arrow\"},\n                {\n                    selector: \"span\",\n                    html: id,\n                },\n            ],\n        });\n    }\n    return properties;\n}\n","import { isObject } from \"@daybrush/utils\";\nimport { Ids, ElementStructure, TimelineInfo } from \"./types\";\n\nexport function getValuesStructure(ids: Ids, timelineInfo: TimelineInfo): ElementStructure[] {\n    const values: ElementStructure[] = [];\n\n    for (const key in timelineInfo) {\n        const propertiesInfo = timelineInfo[key];\n        const frames = propertiesInfo.frames;\n        values.push({\n            ref: (e, i) => {\n                ids.values[i] = e;\n            },\n            key,\n            selector: \".value\",\n            dataset: {\n                key,\n                object: propertiesInfo.isParent ? \"1\" : \"0\",\n            },\n            datas: propertiesInfo,\n            children: {\n                selector: \"input\",\n                attr: {\n                    value: frames[0] ? frames[0][1] : \"\",\n                },\n            },\n        });\n    }\n    return values;\n}\n","import Timeline from \"./Timeline\";\nimport Scene, { SceneItem, Animator, DirectionType } from \"scenejs\";\nimport { createElement, updateElement, getTarget, isSceneItem } from \"./utils\";\nimport DataDOM, { DataStructure } from \"data-dom\";\nimport { ElementStructure } from \"./types\";\nimport { CSS2 } from \"./consts\";\nimport { isUndefined } from \"@daybrush/utils\";\nimport KeyController from \"keycon\";\n\nexport interface SelectEvent {\n    selectedItem: Scene | SceneItem;\n    selectedProperty: string;\n    selectedTime: number;\n    prevSelectedProperty: string;\n    prevSelectedTime: number;\n}\nexport function getOptionAreaStructure(option: string, value: any): ElementStructure {\n    return {\n        selector: \".option_area\",\n        children: [\n            {\n                selector: \".option_name\",\n                html: option,\n            },\n            {\n                selector: \".option_value\",\n                dataset: {\n                    option,\n                },\n                children: {\n                    selector: \"input\",\n                    dataset: {\n                        option,\n                    },\n                    ref: e => {\n                        (e.element as HTMLInputElement).value = isUndefined(value) ? \"\" : value;\n                    },\n                },\n            },\n        ],\n    };\n}\nexport function getOptionsStructure(item?: Animator): ElementStructure[] {\n    return [\n        getOptionAreaStructure(\"delay\", item && item.getDelay()),\n        getOptionAreaStructure(\"easing\", item && item.getEasingName()),\n        getOptionAreaStructure(\"iterationCount\", item && item.getIterationCount()),\n        getOptionAreaStructure(\"playSpeed\", item && item.getPlaySpeed()),\n        getOptionAreaStructure(\"fillMode\", item && item.getFillMode()),\n        getOptionAreaStructure(\"direction\", item && item.getDirection()),\n        getOptionAreaStructure(\"duration\", item && item.getDuration()),\n        getOptionAreaStructure(\"lastFrame\", item && item.getDuration()),\n    ];\n}\nexport class Info {\n    private datadom: DataDOM<ElementStructure>;\n    private optionArea: ElementStructure;\n    private infoArea: ElementStructure;\n    private selectedItem: Scene | SceneItem;\n    constructor(private timeline: Timeline, parentEl: HTMLElement) {\n        timeline.on(\"select\", this.select);\n\n        this.datadom = new DataDOM(\n            createElement,\n            updateElement,\n        );\n        this.selectedItem = timeline.scene;\n\n        this.infoArea = this.datadom.render(\n            {\n                selector: \".item_info\",\n                children: [\n                    {\n                        selector: \"style\",\n                        html: CSS2,\n                    },\n                    {\n                        ref: (e: ElementStructure) => {\n                            this.optionArea = e;\n                        },\n                        selector: \".options_area\",\n                        children: getOptionsStructure(timeline.scene),\n                    },\n                ],\n            },\n            parentEl,\n        );\n        this.init();\n    }\n    public update() {\n        this.datadom.update(\n            this.optionArea.children,\n            getOptionsStructure(this.selectedItem),\n            this.optionArea,\n        );\n    }\n    public select = (info: SelectEvent) => {\n        this.selectedItem = info.selectedItem;\n        this.update();\n    }\n    private init() {\n        new KeyController(this.infoArea.element)\n        .keydown(e => {\n            e.inputEvent.stopPropagation();\n        })\n        .keyup(e => {\n            e.inputEvent.stopPropagation();\n        })\n        .keyup(\"enter\", e => {\n            const selectedItem = this.selectedItem;\n            if (!this.selectedItem) {\n                return;\n            }\n            const target = getTarget(e.inputEvent.target as HTMLInputElement, el => el.nodeName === \"INPUT\");\n\n            if (!target) {\n                return;\n            }\n            const option = target.getAttribute(\"data-option\");\n            const value = target.value;\n\n            if (option === \"delay\") {\n                selectedItem.setDelay(parseFloat(value));\n            } else if (option === \"lastFrame\") {\n                const nextDuration = parseFloat(value);\n                if (isSceneItem(selectedItem) && selectedItem.getDuration() < nextDuration) {\n                    selectedItem.newFrame(nextDuration);\n                }\n            } else if (option === \"playSpeed\") {\n                selectedItem.setPlaySpeed(parseFloat(value));\n            } else if (option === \"direction\") {\n                selectedItem.setDirection(value as DirectionType);\n            } else if (option === \"iterationCount\") {\n                selectedItem.setIterationCount(value === \"infinite\" ? value : parseFloat(value));\n            } else if (option === \"easing\") {\n                selectedItem.setEasing(value);\n            }\n            this.timeline.update();\n            this.update();\n        });\n    }\n}\n","import Scene, { AnimatorState, SceneItem } from \"scenejs\";\nimport { ITERATION_COUNT, DELAY, PLAY_SPEED, DIRECTION, REVERSE, ALTERNATE, ALTERNATE_REVERSE } from \"./consts\";\nimport { TimelineInfo } from \"./types\";\nimport { isScene } from \"./utils\";\nimport { isUndefined, isObject } from \"@daybrush/utils\";\n\nexport const MAXIMUM = 1000000;\nexport function toFixed(num: number) {\n    return Math.round(num * MAXIMUM) / MAXIMUM;\n}\nexport function addEntry(entries: number[][], time: number, keytime: number) {\n    const prevEntry = entries[entries.length - 1];\n\n    (!prevEntry || prevEntry[0] !== time || prevEntry[1] !== keytime) &&\n        entries.push([toFixed(time), toFixed(keytime)]);\n}\nexport function dotNumber(a1: number, a2: number, b1: number, b2: number) {\n    return (a1 * b2 + a2 * b1) / (b1 + b2);\n  }\nexport function getEntries(times: number[], states: AnimatorState[]) {\n    let entries = times.map(time => ([time, time]));\n    let nextEntries = [];\n\n    states.forEach(state => {\n        const iterationCount = state[ITERATION_COUNT] as number;\n        const delay = state[DELAY];\n        const playSpeed = state[PLAY_SPEED];\n        const direction = state[DIRECTION];\n        const intCount = Math.ceil(iterationCount);\n        const currentDuration = entries[entries.length - 1][0];\n        const length = entries.length;\n        const lastTime = currentDuration * iterationCount;\n\n        for (let i = 0; i < intCount; ++i) {\n            const isReverse =\n                direction === REVERSE ||\n                direction === ALTERNATE && i % 2 ||\n                direction === ALTERNATE_REVERSE && !(i % 2);\n\n            for (let j = 0; j < length; ++j) {\n                const entry = entries[isReverse ? length - j - 1 : j];\n                const time = entry[1];\n                const currentTime = currentDuration * i + (isReverse ? currentDuration - entry[0] : entry[0]);\n                const prevEntry = entries[isReverse ? length - j : j - 1];\n\n                if (currentTime > lastTime) {\n                    if (j !== 0) {\n                        const prevTime = currentDuration * i +\n                            (isReverse ? currentDuration - prevEntry[0] : prevEntry[0]);\n                        const divideTime = dotNumber(prevEntry[1], time, lastTime - prevTime, currentTime - lastTime);\n\n                        addEntry(nextEntries, (delay + currentDuration * iterationCount) / playSpeed, divideTime);\n                    }\n                    break;\n                } else if (currentTime === lastTime && nextEntries[nextEntries.length - 1][0] === lastTime + delay) {\n                    break;\n                }\n                addEntry(nextEntries, (delay + currentTime) / playSpeed, time);\n            }\n        }\n        // delay time\n        delay && nextEntries.unshift([0, nextEntries[0][1]]);\n\n        entries = nextEntries;\n        nextEntries = [];\n    });\n\n    return entries;\n}\nexport function getItemInfo(\n    timelineInfo: TimelineInfo,\n    items: Array<Scene | SceneItem>,\n    names: Array<string | number>,\n    item: SceneItem) {\n    item.update();\n    const times = item.times;\n    const entries = getEntries(times, items.map(animator => animator.state));\n\n    (function getPropertyInfo(itemNames: any, ...properties: any[]) {\n        const frames = [];\n        const isParent = isObject(itemNames);\n        entries.forEach(([time, iterationTime]) => {\n            const value = item.get(iterationTime, ...properties);\n            if (isUndefined(value)) {\n                return;\n            }\n            frames.push([time, iterationTime, value]);\n        });\n        timelineInfo[[...names, ...properties].join(\"///\")] = {\n            isParent,\n            item,\n            names,\n            properties,\n            frames,\n        };\n        if (isParent) {\n            for (const property in itemNames) {\n                getPropertyInfo(itemNames[property], ...properties, property);\n            }\n        }\n    })(item.names);\n}\nexport function getTimelineInfo(scene: Scene): TimelineInfo {\n    const timelineInfo: TimelineInfo = {};\n    (function sceneForEach(...items: Array<Scene | SceneItem>) {\n        const lastItem = items[items.length - 1];\n        const names = items.slice(1).map(item => item.getId());\n        if (isScene(lastItem)) {\n            if (names.length) {\n                timelineInfo[names.join(\"///\")] = {\n                    isParent: true,\n                    item: lastItem,\n                    names: [],\n                    properties: [],\n                    frames: [],\n                };\n            }\n            lastItem.forEach((item: Scene | SceneItem) => {\n                sceneForEach(...items, item);\n            });\n        } else {\n            getItemInfo(timelineInfo, items, names, lastItem);\n        }\n    })(scene);\n\n    return timelineInfo;\n}\n","import Scene, { SceneItem } from \"scenejs\";\nimport {\n    getTarget,\n    hasClass, removeClass, addClass,\n    flatObject, splitProperty, findElementIndexByPosition,\n    createElement, updateElement, findIndexByProperty, findStructure, numberFormat, isScene,\n} from \"./utils\";\nimport { drag } from \"@daybrush/drag\";\nimport { CSS } from \"./consts\";\nimport { IObject, addEvent } from \"@daybrush/utils\";\nimport Axes, { PinchInput } from \"@egjs/axes\";\nimport { ElementStructure, Ids, PropertiesInfo, TimelineInfo } from \"./types\";\nimport { dblCheck } from \"./dblcheck\";\nimport KeyController from \"keycon\";\nimport DataDOM from \"data-dom\";\nimport { getHeaderAreaStructure, getKeytimesAreaStructure } from \"./HeaderAreaStructure\";\nimport { getScrollAreaStructure } from \"./ScrollAreaStructure\";\nimport { getControlAreaStructure } from \"./ControlAreaStructure\";\nimport Component from \"@egjs/component\";\nimport { Info } from \"./Info\";\nimport { getTimelineInfo } from \"./TimelineInfo\";\n\nlet isExportCSS = false;\n\nexport default class Timeline extends Component {\n    public scene: Scene;\n    private maxTime: number = 0;\n    private axes: Axes;\n    private selectedProperty: string = \"\";\n    private selectedTime: number = -1;\n    private keycon: KeyController;\n    private datadom: DataDOM<ElementStructure>;\n    private structure: ElementStructure;\n    private ids: Ids = {};\n    private timelineInfo: TimelineInfo;\n    constructor(scene: Scene, parentEl: HTMLElement) {\n        super();\n\n        scene.finish();\n        this.scene = scene;\n        this.initStructure(scene, parentEl);\n        this.initEditor();\n        this.initScroll();\n        this.initWheelZoom();\n        this.initDragKeyframes();\n        this.initClickProperty();\n        this.initController();\n        this.initDragValues();\n        this.initKeyController();\n\n        scene.setTime(0);\n\n        new Info(this, parentEl);\n    }\n    public getElement() {\n        return this.structure.element;\n    }\n    // scene control\n    public prev() {\n        this.scene.setTime(this.scene.getTime() - 0.05);\n    }\n    public next() {\n        this.scene.setTime(this.scene.getTime() + 0.05);\n    }\n    public finish() {\n        this.scene.finish();\n    }\n    public togglePlay() {\n        const scene = this.scene;\n        if (scene.getPlayState() === \"running\") {\n            scene.pause();\n        } else {\n            scene.play();\n        }\n    }\n    public update() {\n        const scene = this.scene;\n        this.timelineInfo = getTimelineInfo(scene);\n        const maxDuration = Math.ceil(scene.getDuration());\n        const maxTime = maxDuration;\n        let zoom = this.axes.get([\"zoom\"]).zoom;\n        const currentMaxTime = this.maxTime;\n        this.maxTime = maxTime;\n        const ids = this.ids;\n        const prevKeytimesArea = ids.keyframesAreas[0];\n        const nextZoom = currentMaxTime > 5 ? maxDuration / currentMaxTime : 1;\n\n        zoom = zoom * nextZoom;\n        this.axes.axm.set({ zoom });\n        // update keytimes\n        this.datadom.update(\n            prevKeytimesArea,\n            getKeytimesAreaStructure(ids, zoom, maxDuration, maxTime),\n        );\n\n        const nextScrollAreaStructure = getScrollAreaStructure(\n            ids,\n            this.timelineInfo,\n            this.axes.get([\"zoom\"]).zoom,\n            maxDuration, this.maxTime,\n        );\n\n        this.datadom.update(\n            ids.scrollArea,\n            nextScrollAreaStructure,\n        );\n        scene.setTime(scene.getTime());\n    }\n    // init\n    private initController() {\n        const ids = this.ids;\n        const playBtn = this.ids.playBtn.element;\n        const scene = this.scene;\n\n        playBtn.addEventListener(\"click\", e => {\n            this.togglePlay();\n            e.preventDefault();\n        });\n        ids.unselectedArea.element.addEventListener(\"click\", e => {\n            this.select(\"\", -1);\n        });\n        ids.prevBtn.element.addEventListener(\"click\", e => {\n            this.prev();\n            e.preventDefault();\n        });\n        ids.nextBtn.element.addEventListener(\"click\", e => {\n            this.next();\n            e.preventDefault();\n        });\n        scene.on(\"play\", () => {\n            addClass(playBtn, \"pause\");\n            removeClass(playBtn, \"play\");\n            // playBtn.innerHTML = \"pause\";\n        });\n        scene.on(\"paused\", () => {\n            addClass(playBtn, \"play\");\n            removeClass(playBtn, \"pause\");\n            // playBtn.innerHTML = \"play\";\n        });\n        new KeyController(ids.timeArea.element)\n        .keydown(e => {\n            !e.isToggle && e.inputEvent.stopPropagation();\n        })\n        .keyup(e => {\n            !e.isToggle && e.inputEvent.stopPropagation();\n        })\n        .keyup(\"enter\", e => {\n            // go to time\n            const element = ids.timeArea.element;\n            const value = (element as HTMLInputElement).value;\n            const result = /(\\d+):(\\d+):(\\d+)/g.exec(value);\n\n            if (!result) {\n                return;\n            }\n            const minute = parseFloat(result[1]);\n            const second = parseFloat(result[2]);\n            const milisecond = parseFloat(`0.${result[3]}`);\n            const time = minute * 60 + second + milisecond;\n\n            scene.setTime(time);\n        });\n    }\n    private initKeyController() {\n        const ids = this.ids;\n\n        window.addEventListener(\"blur\", () => {\n            removeClass(ids.timeline.element, \"alt\");\n        });\n        this.keycon = new KeyController()\n        .keydown(\"space\", ({inputEvent}) => {\n            inputEvent.preventDefault();\n        })\n        .keydown(\"left\", e => {\n            this.prev();\n        })\n        .keydown(\"right\", e => {\n            this.next();\n        })\n        .keyup(\"backspace\", () => {\n            this.removeKeyframe(this.selectedProperty);\n        })\n        .keydown(\"alt\", () => {\n            addClass(ids.timeline.element, \"alt\");\n        })\n        .keyup(\"alt\", () => {\n            removeClass(ids.timeline.element, \"alt\");\n        })\n        .keyup(\"esc\", () => {\n            this.finish();\n        })\n        .keyup(\"space\", () => {\n            this.togglePlay();\n        });\n    }\n    private initStructure(scene: Scene, parentEl: HTMLElement) {\n        this.timelineInfo = getTimelineInfo(scene);\n        const duration = Math.ceil(scene.getDuration());\n        const maxDuration = Math.ceil(duration);\n        const maxTime = maxDuration;\n        const ids = this.ids;\n        let timelineCSS: ElementStructure;\n\n        this.maxTime = maxTime;\n        if (!isExportCSS) {\n            timelineCSS = {\n                selector: \"style.style\",\n                html: CSS,\n            };\n            isExportCSS = true;\n        }\n\n        const structure: ElementStructure = {\n            selector: \".timeline\",\n            ref: e => {\n                ids.timeline = e;\n            },\n            children: [\n                timelineCSS,\n                getControlAreaStructure(ids),\n                getHeaderAreaStructure(ids, 1, maxDuration, maxTime),\n                getScrollAreaStructure(ids, this.timelineInfo, 1, maxDuration, maxTime),\n            ],\n        };\n        this.datadom = new DataDOM(\n            createElement,\n            updateElement,\n        );\n        this.structure = this.datadom.render(structure, parentEl);\n    }\n    private initScroll() {\n        const {\n            keyframesAreas,\n        } = this.ids;\n        let isScrollKeyframe = false;\n\n        const headerKeyframesArea = keyframesAreas[0].element;\n        const scrollKeyframesArea = keyframesAreas[1].element;\n        headerKeyframesArea.addEventListener(\"scroll\", () => {\n            if (isScrollKeyframe) {\n                isScrollKeyframe = false;\n            } else {\n                isScrollKeyframe = true;\n                scrollKeyframesArea.scrollLeft = headerKeyframesArea.scrollLeft;\n            }\n        });\n        scrollKeyframesArea.addEventListener(\"scroll\", () => {\n            if (isScrollKeyframe) {\n                isScrollKeyframe = false;\n            } else {\n                isScrollKeyframe = true;\n                headerKeyframesArea.scrollLeft = scrollKeyframesArea.scrollLeft;\n            }\n        });\n    }\n    private initWheelZoom() {\n        const ids = this.ids;\n        const keyframesScrollAreas = ids.keyframesScrollAreas;\n        const headerArea = keyframesScrollAreas[0].element;\n        const scrollArea = keyframesScrollAreas[1].element;\n\n        const axes = new Axes(\n            {\n                zoom: {\n                    range: [1, Infinity],\n                },\n            },\n            {},\n            { zoom: 1 },\n        );\n        axes.connect(\"zoom\", new PinchInput(scrollArea, {\n            scale: 0.1,\n            hammerManagerOptions: {\n                touchAction: \"auto\",\n            },\n        }));\n        axes.on(\"hold\", e => {\n            if (e.inputEvent) {\n                e.inputEvent.preventDefault();\n            }\n        });\n        axes.on(\"change\", e => {\n            const scale = ids.keyframesScrollAreas[0].dataset.width;\n            const width = e.pos.zoom * scale * 100;\n\n            ids.keyframesScrollAreas.forEach(({ element }) => {\n                element.style.width = `${width}%`;\n            });\n\n            if (e.inputEvent) {\n                e.inputEvent.preventDefault();\n            }\n        });\n\n        this.axes = axes;\n        headerArea.addEventListener(\"wheel\", e => {\n            const delta = e.deltaY;\n\n            axes.setBy({ zoom: delta / 5000 });\n            !e.deltaX && e.preventDefault();\n        });\n\n        addEvent(scrollArea, \"wheel\", e => {\n            if (!this.keycon.altKey) {\n                return;\n            }\n            e.preventDefault();\n            const delta = e.deltaY;\n\n            axes.setBy({ zoom: delta / 5000 });\n        });\n    }\n    private select(selectedProperty: string, keyframeTime?: number) {\n        const prevSelectedProperty = this.selectedProperty;\n        const prevSelectedTime = this.selectedTime;\n        const ids = this.ids;\n        const values = ids.values;\n        const properties = ids.properties;\n        const keyframesList = ids.keyframesList;\n\n        this.selectedProperty = selectedProperty;\n        this.scene.pause();\n        if (prevSelectedProperty) {\n            const prevSelectedIndex = findIndexByProperty(prevSelectedProperty, properties);\n\n            removeClass(properties[prevSelectedIndex].element, \"select\");\n            removeClass(values[prevSelectedIndex].element, \"select\");\n            removeClass(keyframesList[prevSelectedIndex].element, \"select\");\n\n            if (prevSelectedTime >= 0) {\n                const keyframes = ids.keyframesContainers[prevSelectedIndex].children as ElementStructure[];\n\n                keyframes.forEach(keyframe => {\n                    if (keyframe.datas.time === prevSelectedTime) {\n                        removeClass(keyframe.element, \"select\");\n                    }\n                });\n                this.selectedTime = -1;\n            }\n        }\n        let selectedItem: Scene | SceneItem = this.scene;\n        if (selectedProperty) {\n            if (document.activeElement) {\n                (document.activeElement as HTMLElement).blur();\n            }\n            const selectedIndex = findIndexByProperty(selectedProperty, properties);\n            addClass(properties[selectedIndex].element, \"select\");\n            addClass(values[selectedIndex].element, \"select\");\n            addClass(keyframesList[selectedIndex].element, \"select\");\n\n            selectedItem = (ids.keyframesList[selectedIndex].datas as PropertiesInfo).item;\n            if (keyframeTime >= 0) {\n                const selectedPropertyStructure = ids.keyframesContainers[selectedIndex];\n                const keyframes = selectedPropertyStructure.children as ElementStructure[];\n\n                keyframes.forEach(keyframe => {\n                    if (keyframe.datas.time === keyframeTime) {\n                        addClass(keyframe.element, \"select\");\n                    }\n                });\n                this.selectedTime = keyframeTime;\n            }\n        }\n        this.trigger(\"select\", {\n            selectedItem,\n            selectedProperty: this.selectedProperty,\n            selectedTime: this.selectedTime,\n            prevSelectedProperty,\n            prevSelectedTime,\n        });\n    }\n    private initClickProperty() {\n        const ids = this.ids;\n        const {\n            propertiesAreas,\n        } = ids;\n\n        propertiesAreas[1].element.addEventListener(\"click\", e => {\n            const properties = ids.properties.map(property => property.element);\n            const length = properties.length;\n            const arrow = getTarget(e.target as HTMLElement, el => hasClass(el, \"arrow\"));\n            const target = getTarget(e.target as HTMLElement, el => hasClass(el, \"property\"));\n\n            if (!target) {\n                return;\n            }\n            const index = properties.indexOf(target);\n\n            if (index === -1) {\n                return;\n            }\n            // select\n            if (!arrow) {\n                this.select(properties[index].dataset.key);\n                return;\n            }\n        });\n    }\n    private setInputs(obj: IObject<any>) {\n        const valuesArea = this.ids.valuesArea.element;\n        for (const name in obj) {\n            valuesArea.querySelector<HTMLInputElement>(`[data-key=\"${name}\"] input`).value = obj[name];\n        }\n    }\n    private moveCursor(time: number) {\n        const {cursors} = this.ids;\n        const maxTime = this.maxTime;\n        const px = 15 - 30 * time / maxTime;\n        const percent = 100 * time / maxTime;\n        const left = `calc(${percent}% + ${px}px)`;\n\n        cursors.forEach(cursor => {\n            cursor.element.style.left = left;\n        });\n    }\n    private initDragKeyframes() {\n        const ids = this.ids;\n        const {\n            scrollArea,\n            timeArea,\n            cursors,\n            keyframesAreas,\n            keyframesScrollAreas,\n        } = ids;\n        const scene = this.scene;\n\n        scene.on(\"animate\", e => {\n            const time = e.time;\n            this.moveCursor(time);\n\n            this.setInputs(flatObject(e.frames));\n            const minute = numberFormat(Math.floor(time / 60), 2);\n            const second = numberFormat(Math.floor(time % 60), 2);\n            const milisecond = numberFormat(Math.floor((time % 1) * 100), 3, true);\n            (timeArea.element as HTMLInputElement).value = `${minute}:${second}:${milisecond}`;\n        });\n        const getTime = (clientX: number) => {\n            const rect = keyframesScrollAreas[1].element.getBoundingClientRect();\n            const scrollAreaWidth = rect.width - 30;\n            const scrollAreaX = rect.left + 15;\n            const x = Math.min(scrollAreaWidth, Math.max(clientX - scrollAreaX, 0));\n            const percentage = x / scrollAreaWidth;\n            let time = this.maxTime * percentage;\n\n            time = Math.round(time * 20) / 20;\n\n            return time;\n        };\n        const move = (clientX: number) => {\n            scene.setTime(getTime(clientX));\n        };\n        const click = (e, clientX, clientY) => {\n            const target = getTarget(e.target as HTMLElement, el => hasClass(el, \"keyframe\"));\n            const time = target ? parseFloat(target.getAttribute(\"data-time\")) : getTime(clientX);\n\n            scene.setTime(time);\n            const list = ids.keyframesList;\n            const index = findElementIndexByPosition(\n                list.map(({element}) => element),\n                clientY,\n            );\n\n            if (index > -1) {\n                this.select(list[index].dataset.key, time);\n            }\n            e.preventDefault();\n        };\n        const dblclick = (e, clientX, clientY) => {\n            const list = ids.keyframesList;\n            const index = findElementIndexByPosition(\n                list.map(({element}) => element),\n                clientY,\n            );\n\n            if (index === -1) {\n                return;\n            }\n            this.addKeyframe(index, getTime(clientX));\n        };\n        drag(cursors[0].element, {\n            dragstart: ({inputEvent}) => {\n                inputEvent.stopPropagation();\n            },\n            drag: ({ clientX }) => {\n                move(clientX);\n            },\n            container: window,\n        });\n        keyframesScrollAreas.forEach(({ element }) => {\n            drag(element, {\n                container: window,\n                drag: ({ deltaX, deltaY, inputEvent }) => {\n                    keyframesAreas[1].element.scrollLeft -= deltaX;\n                    scrollArea.element.scrollTop -= deltaY;\n                    inputEvent.preventDefault();\n                },\n                dragend: ({ isDrag, clientX, clientY, inputEvent }) => {\n                    !isDrag && click(inputEvent, clientX, clientY);\n                    dblCheck(isDrag, inputEvent, clientX, clientY, dblclick);\n                },\n            });\n        });\n    }\n    private initDragValues() {\n        let dragTarget: HTMLInputElement = null;\n        let dragTargetValue: any;\n        drag(this.ids.valuesArea.element, {\n            container: window,\n            dragstart: e => {\n                dragTarget = e.inputEvent.target;\n                dragTargetValue = dragTarget.value;\n\n                console.log(this.keycon.altKey, getTarget(dragTarget, el => el.nodeName === \"INPUT\"));\n                if (!this.keycon.altKey || !getTarget(dragTarget, el => el.nodeName === \"INPUT\")) {\n                    return false;\n                }\n            },\n            drag: e => {\n                const nextValue = dragTargetValue.replace(/-?\\d+/g, num => {\n                    return `${parseFloat(num) + Math.round(e.distX / 2)}`;\n                });\n\n                dragTarget.value = nextValue;\n            },\n            dragend: e => {\n                this.edit(dragTarget, dragTarget.value);\n            },\n        });\n    }\n    private addKeyframe(index: number, time: number) {\n        const list = this.ids.keyframesList;\n        const property = list[index].dataset.key;\n        const {item, properties} = list[index].datas as PropertiesInfo;\n\n        this.select(property, time);\n\n        const value = ((this.ids.values[index].children as ElementStructure).element as HTMLInputElement).value;\n\n        this.editKeyframe(index, value);\n    }\n    private removeKeyframe(property: string) {\n        const propertiesInfo = this.timelineInfo[property];\n        if (!property || !propertiesInfo || isScene(propertiesInfo.item)) {\n            return;\n        }\n\n        const properties = propertiesInfo.properties;\n        const item = propertiesInfo.item;\n\n        item.remove(item.getIterationTime(), ...properties);\n        this.update();\n    }\n    private editKeyframe(index: number, value: any) {\n        const ids = this.ids;\n        const isObjectData = ids.properties[index].dataset.object === \"1\";\n\n        if (isObjectData) {\n            return;\n        }\n        const propertiesInfo = ids.keyframesList[index].datas as PropertiesInfo;\n        const item = propertiesInfo.item;\n        const properties = propertiesInfo.properties;\n\n        console.log(properties);\n        item.set(item.getIterationTime(), ...properties, value);\n        this.update();\n    }\n    private restoreKeyframes() {\n        this.scene.setTime(this.scene.getTime());\n    }\n    private edit(target: HTMLInputElement, value: any) {\n        const parentEl = getTarget(target, el => hasClass(el, \"value\"));\n\n        if (!parentEl) {\n            return;\n        }\n        const values = this.ids.values.map(({element}) => element);\n        const index = values.indexOf(parentEl);\n\n        if (index === -1) {\n            return;\n        }\n        this.editKeyframe(index, value);\n    }\n    private initEditor() {\n        const valuesArea = this.ids.valuesArea.element;\n\n        new KeyController(valuesArea)\n        .keydown(e => {\n            !e.isToggle && e.inputEvent.stopPropagation();\n        })\n        .keyup(e => {\n            !e.isToggle && e.inputEvent.stopPropagation();\n        })\n        .keyup(\"enter\", e => {\n            const target = e.inputEvent.target as HTMLInputElement;\n\n            this.edit(target, target.value);\n        })\n        .keyup(\"esc\", e => {\n            const target = e.inputEvent.target as HTMLInputElement;\n\n            target.blur();\n        });\n        valuesArea.addEventListener(\"focusout\", e => {\n            this.restoreKeyframes();\n        });\n    }\n}\n","import { Ids, ElementStructure } from \"./types\";\n\nexport function getControlAreaStructure(ids: Ids): ElementStructure {\n    return {\n        selector: \".header_area.control_area\",\n        children: [\n            {\n                selector: \".properties_area\",\n                ref: (e: ElementStructure) => {\n                    ids.unselectedArea = e;\n                },\n                children: {\n                    selector: \".property\",\n                },\n            },\n            {\n                selector: \".values_area\",\n                children: {\n                    selector: \".value\",\n                },\n            },\n            {\n                selector: \".keyframes_area\",\n                children: {\n                    selector: \".keyframes\",\n                    children: [\n                        {\n                            selector: \"input.time_area\",\n                            ref: (e: ElementStructure) => {\n                                ids.timeArea = e;\n                            },\n                            html: \"???\",\n                            // html: \"0\",\n                        },\n                        {\n                            selector: \".play_control_area\",\n                            children: [\n                                {\n                                    ref: (e: ElementStructure) => {\n                                        ids.prevBtn = e;\n                                    },\n                                    selector: \".control.prev\",\n                                },\n                                {\n                                    ref: (e: ElementStructure) => {\n                                        ids.playBtn = e;\n                                    },\n                                    selector: \".control.play\",\n                                },\n                                {\n                                    ref: (e: ElementStructure) => {\n                                        ids.nextBtn = e;\n                                    },\n                                    selector: \".control.next\",\n                                },\n                            ],\n                        },\n                    ],\n                },\n            },\n        ],\n    };\n}\n"],"names":["PREFIX","CSS2","replace","CSS","DIRECTION","ITERATION_COUNT","DELAY","PLAY_SPEED","ALTERNATE","REVERSE","ALTERNATE_REVERSE","numberFormat","num","count","isRight","length","arr","push","i","join","applyStyle","el","style","name","findIndexByProperty","selectedProperty","structures","findIndex","_a","createElement","structure","selector","dataset","attr","html","classNames","match","tag","id","document","className","map","setAttribute","innerHTML","updateElement","prevStructure","nextStructure","element","toValue","value","Array","isArray","keys","k","getTarget","target","conditionCallback","parentTarget","body","parentNode","hasClass","hasClass2","addClass","addClass2","removeClass","removeClass2","isScene","constructor","prototype","getItem","findElementIndexByPosition","elements","pos","index","box","getBoundingClientRect","top","bottom","height","prevTime","prevX","prevY","getKeytimesAreaStructure","ids","zoom","maxDuration","maxTime","ref","e","keyframesAreas","children","minWidth","width","Math","min","keyframesScrollAreas","cursors","keytimesContainer","keytimes","time","key","getKeytimesStructure","getKeyframesAreaStructure","keyframesList","lineArea","lines","left","getLinesStructure","getKeyframesScrollAreaChildrenStructure","getKeyframesStructure","propertiesInfo","keyframeLines","duration","item","getDuration","frames","delayFrames","iterationTime","valueText","_b","nextTime","nextIterationTime","nextValue","nextValueText","datas","getDelayFrameStructure","isUndefined","from","to","getScrollAreaStructure","timelineInfo","keyframes","keyframesContainers","getKeyframesListStructure","scrollArea","propertiesAreas","properties","propertyNames","split","object","isParent","paddingLeft","getPropertiesStructure","valuesArea","values","getValuesStructure","getOptionAreaStructure","option","getOptionsStructure","getDelay","getEasingName","getIterationCount","getPlaySpeed","getFillMode","getDirection","timeline","parentEl","info","_this","selectedItem","update","on","this","select","datadom","DataDOM","scene","infoArea","render","optionArea","init","KeyController","keydown","inputEvent","stopPropagation","keyup","nodeName","getAttribute","setDelay","parseFloat","nextDuration","getFrame","isSceneItem","newFrame","setPlaySpeed","setDirection","setIterationCount","setEasing","MAXIMUM","toFixed","round","addEntry","entries","keytime","prevEntry","getItemInfo","items","names","times","states","nextEntries","forEach","state","b1","b2","iterationCount","delay","playSpeed","direction","intCount","ceil","currentDuration","lastTime","isReverse","j","entry","currentTime","divideTime","unshift","getEntries","animator","getPropertyInfo","itemNames","_i","isObject","get","property","getTimelineInfo","sceneForEach","lastItem","slice","getId","isExportCSS","_super","finish","initStructure","initEditor","initScroll","initWheelZoom","initDragKeyframes","initClickProperty","initController","initDragValues","initKeyController","setTime","Info","tslib_1","getTime","getPlayState","pause","play","axes","currentMaxTime","prevKeytimesArea","axm","set","nextScrollAreaStructure","playBtn","addEventListener","togglePlay","preventDefault","unselectedArea","prevBtn","prev","nextBtn","next","timeArea","isToggle","result","exec","window","keycon","removeKeyframe","timelineCSS","getControlAreaStructure","getHeaderAreaStructure","isScrollKeyframe","headerKeyframesArea","scrollKeyframesArea","scrollLeft","headerArea","Axes","range","Infinity","connect","PinchInput","scale","hammerManagerOptions","touchAction","delta","deltaY","setBy","deltaX","addEvent","altKey","keyframeTime","prevSelectedProperty","prevSelectedTime","selectedTime","prevSelectedIndex","keyframe","activeElement","blur","selectedIndex","trigger","arrow","indexOf","obj","querySelector","cursor","moveCursor","setInputs","flatObject","newObj","nextObj","toCSS","nextName","minute","floor","second","milisecond","clientX","rect","scrollAreaWidth","scrollAreaX","percentage","max","dblclick","clientY","addKeyframe","drag","dragstart","move","container","scrollTop","dragend","isDrag","list","click","callback","now","dblCheck","dragTargetValue","dragTarget","console","log","distX","edit","editKeyframe","remove","getIterationTime","restoreKeyframes","Component"],"mappings":"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"}