{"version":3,"file":"timeline.min.js","sources":["../src/consts.ts","../src/utils.ts","../src/dblcheck.ts","../src/HeaderAreaStructure.ts","../src/KeytimesStructure.ts","../src/KeyframesStructure.ts","../src/ScrollAreaStructure.ts","../src/PropertiesStructure.ts","../src/ValuesStructure.ts","../src/TimelineInfo.ts","../src/Timeline.ts","../src/ControlAreaStructure.ts"],"sourcesContent":["export const PREFIX = `scenejs_editor_`;\n\nexport const CSS2 = `\n.item_info {\n    position: fixed;\n    right: 0;\n    top: 0;\n    width: 200px;\n    background: #000;\n}\n.options_area {\n\n}\n.option_area {\n    position: relative;\n    border-bottom: 1px solid #777;\n    box-sizing: border-box;\n    white-space: nowrap;\n    background: rgba(90, 90, 90, 0.7);\n    font-size: 13px;\n    font-weight: bold;\n    color: #eee;\n    display: flex;\n}\n.option_name, .option_value {\n    width: 50%;\n    height: 30px;\n    line-height: 20px;\n    box-sizing: border-box;\n    padding: 5px;\n}\n.option_name {\n    border-right: 1px solid #999;\n}\n.option_value input {\n    appearance: none;\n    -webkit-appearance: none;\n    outline: none;\n    position: relative;\n    display: block;\n    width: 100%;\n    height: 100%;\n    background: transparent;\n    color: #4af;\n    font-weight: bold;\n    background: none;\n    border: 0;\n    box-sizing: border-box;\n}\n`.replace(/\\.([^{,\\s\\d.]+)/g, `.${PREFIX}$1`);\n\nexport const CSS = `\n.timeline * {\n    box-sizing: border-box;\n}\n.timeline {\n  position: fixed;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  font-size: 0;\n  background: #000;\n  display: flex;\n  flex-direction: column;\n}\n.header_area, .scroll_area {\n   width: 100%;\n   position: relative;\n  display: flex;\n  -webkit-align-items: flex-start;\n  align-items: flex-start;\n}\n.header_area {\n  position: relative;\n  z-index: 10;\n  top: 0;\n  height: 30px;\n  min-height: 30px;\n}\n.header_area .keyframes {\n  padding: 0px;\n}\n.header_area .properties_area,\n.header_area .keyframes_area,\n.header_area .values_area,\n.header_area .keyframes_scroll_area {\n    height: 100%;\n}\n.header_area .property, .header_area .value, .header_area .keyframes {\n  height: 100%;\n}\n.header_area .property {\n    line-height: 30px;\n}\n.value .add {\n    text-align: center;\n    color: #fff;\n    line-height: 30px;\n    font-weight: bold;\n    font-size: 20px;\n    cursor: pointer;\n}\n.header_area .keyframes_area::-webkit-scrollbar {\n    display: none; // Safari and Chrome\n}\n.header_area .keyframe_cursor {\n    position: absolute;\n    border-top: 10px solid #4af;\n    border-left: 6px solid transparent;\n    border-right: 6px solid transparent;\n    width: 0;\n    height: 0;\n    bottom: 0;\n    top: auto;\n    background: none;\n    cursor: pointer;\n}\n.control_area .keyframes {\n    padding-left: 10px;\n}\n.play_control_area {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n}\n.play_control_area .control {\n    position: relative;\n    display: inline-block;\n    vertical-align: middle;\n    color: white;\n    margin: 0px 15px;\n}\n.play {\n    border-left: 14px solid white;\n    border-top: 8px solid transparent;\n    border-bottom: 8px solid transparent;\n}\n.pause {\n    border-left: 4px solid #fff;\n    border-right: 4px solid #fff;\n    width: 14px;\n    height: 16px;\n}\n.prev {\n    border-right: 10px solid white;\n    border-top: 6px solid transparent;\n    border-bottom: 6px solid transparent;\n}\n.prev:before {\n    position: absolute;\n    content: \"\";\n    width: 3px;\n    height: 10px;\n    top: 0;\n    right: 100%;\n    transform: translate(0, -50%);\n    background: white;\n}\n.next {\n    border-left: 10px solid white;\n    border-top: 6px solid transparent;\n    border-bottom: 6px solid transparent;\n}\n.next:before {\n    position: absolute;\n    content: \"\";\n    width: 3px;\n    height: 10px;\n    top: 0;\n    transform: translate(0, -50%);\n    background: white;\n}\n.keytime {\n  position: relative;\n  display: inline-block;\n  height: 100%;\n  font-size: 13px;\n  font-weight: bold;\n  color: #777;\n}\n.keytime:last-child {\n  max-width: 0px;\n}\n.keytime span {\n  position: absolute;\n  line-height: 1;\n  bottom: 12px;\n  display: inline-block;\n  transform: translate(-50%);\n  color: #eee;\n}\n.keytime .graduation {\n  position: absolute;\n  bottom: 0;\n  width: 1px;\n  height: 10px;\n  background: #777;\n  transform: translate(-50%);\n}\n.keytime .graduation.half {\n  left: 50%;\n  height: 7px;\n}\n.keytime .graduation.quarter {\n  left: 25%;\n  height: 5px;\n}\n.keytime .graduation.quarter3 {\n  left: 75%;\n  height: 5px;\n}\n.scroll_area {\n  position: relative;\n  width: 100%;\n  height: calc(100% - 60px);\n  overflow: auto;\n}\n.properties_area, .keyframes_area, .values_area {\n  display: inline-block;\n  position: relative;\n  font-size: 16px;\n  overflow: auto;\n}\n\n.properties_area::-webkit-scrollbar, .keyframes_area::-webkit-scrollbar {\n    display: none; // Safari and Chrome\n}\n.properties_area {\n  width: 30%;\n  max-width: 200px;\n  box-sizing: border-box;\n}\n.values_area {\n    width: 50px;\n    min-width: 50px;\n    display: inline-block;\n    border-right: 1px solid #999;\n    box-sizing: border-box;\n}\n.value input {\n    appearance: none;\n    -webkit-appearance: none;\n    outline: none;\n    position: relative;\n    display: block;\n    width: 100%;\n    height: 100%;\n    background: transparent;\n    color: #4af;\n    font-weight: bold;\n    background: none;\n    border: 0;\n    box-sizing: border-box;\n    text-align: center;\n}\n.value {\n\n}\n.alt .value input {\n    cursor: ew-resize;\n}\n.value[data-object=\"1\"] input {\n    display: none;\n}\n.properties_scroll_area {\n  display: inline-block;\n  min-width: 100%;\n}\n.keyframes_area {\n  flex: 1;\n}\n.keyframes_scroll_area {\n  position: relative;\n  min-width: 300px;\n}\n.keyframes, .property, .value {\n  position: relative;\n  height: 30px;\n  line-height: 30px;\n  border-bottom: 1px solid #777;\n  box-sizing: border-box;\n  white-space: nowrap;\n  background: rgba(90, 90, 90, 0.7);\n  z-index: 1;\n}\n\n.property {\n  padding-left: 10px;\n  box-sizing: border-box;\n  font-size: 13px;\n  font-weight: bold;\n  color: #eee;\n}\n.property .remove {\n    position: absolute;\n    display: inline-block;\n    cursor: pointer;\n    width: 18px;\n    height: 18px;\n    top: 0;\n    bottom: 0;\n    right: 10px;\n    margin: auto;\n    border-radius: 50%;\n    border: 2px solid #fff;\n    vertical-align: middle;\n    display: none;\n    margin-left: 10px;\n    box-sizing: border-box;\n}\n.property .remove:before, .property .remove:after {\n    position: absolute;\n    content: \"\";\n    width: 8px;\n    height: 2px;\n    border-radius: 1px;\n    background: #fff;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto;\n}\n.property .remove:before {\n    transform: rotate(45deg);\n}\n.property .remove:after {\n    transform: rotate(-45deg);\n}\n.property:hover .remove {\n    display: inline-block;\n}\n\n[data-item=\"1\"], [data-item=\"1\"] .add {\n    height: 30px;\n    line-height: 30px;\n}\n.time_area {\n    font-size: 13px;\n    color: #4af;\n    line-height: 30px;\n    font-weight: bold;\n    height: 100%;\n    line-height: 30px;\n    border: 0;\n    background: transparent;\n    outline: 0;\n}\n.time_area:after {\n    content: \"s\";\n}\n.property .arrow {\n    position: relative;\n    display: inline-block;\n    margin-right: 5px;\n    width: 0;\n    vertical-align: middle;\n    cursor: pointer;\n    border-top: 6px solid #eee;\n    border-left: 4px solid transparent;\n    border-right: 4px solid transparent;\n}\n.property[data-fold=\"1\"] .arrow {\n    border-top: 4px solid transparent;\n    border-bottom: 4px solid transparent;\n    border-right: 0;\n    border-left: 6px solid #eee;\n    margin-left: 2px;\n}\n.property[data-object=\"0\"] .arrow {\n    display: none;\n}\n.property.fold, .keyframes.fold, .value.fold {\n    display: none;\n}\n.property.select, .value.select, .keyframes.select {\n    background: rgba(120, 120, 120, 0.7);\n}\n.keyframes {\n\n}\n.keyframe_delay {\n  position: absolute;\n  height: 100%;\n  top: 0;\n  left: 0;\n  background: #4af;\n  opacity: 0.2;\n  z-index: 0;\n}\n.keyframe_group {\n    position: absolute;\n    top: 3px;\n    bottom: 3px;\n    left: 0;\n    background: #4af;\n    opacity: 0.6;\n    border: 1px solid rgba(0, 0, 0, 0.2);\n    border-left-color: rgba(255, 255, 255, 0.2);\n    border-top-color: rgba(255, 255, 255, 0.2);\n    z-index: 0;\n}\n.keyframe_line {\n  position: absolute;\n  height: 8px;\n  top: 0;\n  bottom: 0;\n  margin: auto;\n  background: #666;\n  z-index: 0;\n}\n.keyframe {\n  position: absolute;\n  font-size: 0px;\n  width: 12px;\n  height: 12px;\n  top: 0px;\n  bottom: 0px;\n  margin: auto;\n  background: #fff;\n  border: 2px solid #383838;\n  border-radius: 2px;\n  box-sizing: border-box;\n  transform: translate(-50%) rotate(45deg);\n  z-index: 1;\n  cursor: pointer;\n}\n.keyframe[data-no=\"1\"] {\n    opacity: 0.2;\n}\n.select .keyframe {\n    border-color: #555;\n}\n.keyframe.select {\n    background: #4af;\n}\n.keyframes_container, .line_area {\n  position: relative;\n  width: calc(100% - 30px);\n  left: 15px;\n  height: 100%;\n}\n.line_area {\n  position: absolute;\n  top: 0;\n  z-index: 0;\n}\n.keyframe_cursor {\n  position: absolute;\n  top: 0;\n  z-index: 1;\n  background: #4af;\n  width: 1px;\n  height: 100%;\n  left: 15px;\n  transform: translate(-50%);\n}\n.scroll_aare .keyframe_cursor {\n  pointer-events: none;\n}\n.division_line {\n  position: absolute;\n  background: #333;\n  width: 1px;\n  height: 100%;\n  transform: translate(-50%);\n}\n`.replace(/\\.([^{,\\s\\d.]+)/g, `.${PREFIX}$1`);\n\nexport const DURATION = \"duration\";\nexport const FILL_MODE = \"fillMode\";\nexport const DIRECTION = \"direction\";\nexport const ITERATION_COUNT = \"iterationCount\";\nexport const DELAY = \"delay\";\nexport const EASING = \"easing\";\nexport const PLAY_SPEED = \"playSpeed\";\nexport const EASING_NAME = \"easingName\";\nexport const ITERATION_TIME = \"iterationTime\";\nexport const PAUSED = \"paused\";\nexport const ENDED = \"ended\";\nexport const TIMEUPDATE = \"timeupdate\";\nexport const ANIMATE = \"animate\";\nexport const PLAY = \"play\";\nexport const RUNNING = \"running\";\nexport const ITERATION = \"iteration\";\nexport const START_ANIMATION = \"startAnimation\";\nexport const PAUSE_ANIMATION = \"pauseAnimation\";\nexport const ALTERNATE = \"alternate\";\nexport const REVERSE = \"reverse\";\nexport const ALTERNATE_REVERSE = \"alternate-reverse\";\nexport const NORMAL = \"normal\";\nexport const INFINITE = \"infinite\";\nexport const PLAY_STATE = \"playState\";\nexport const PLAY_CSS = \"playCSS\";\nexport const PREV_TIME = \"prevTime\";\nexport const TICK_TIME = \"tickTime\";\nexport const CURRENT_TIME = \"currentTime\";\nexport const SELECTOR = \"selector\";\nexport const TRANSFORM_NAME = \"transform\";\n","import { PREFIX } from \"./consts\";\nimport Scene, { SceneItem, Frame } from \"scenejs\";\nimport {\n    hasClass as hasClass2,\n    addClass as addClass2,\n    removeClass as removeClass2,\n    IObject,\n    isObject,\n    isArray,\n    isUndefined,\n} from \"@daybrush/utils\";\nimport { ElementStructure, TimelineInfo } from \"./types\";\n\nexport function numberFormat(num: number, count: number, isRight?: boolean) {\n    const length = `${num}`.length;\n    const arr = [];\n\n    if (isRight) {\n        arr.push(num);\n    }\n    for (let i = length; i < count; ++i) {\n        arr.push(0);\n    }\n    if (!isRight) {\n        arr.push(num);\n    }\n    return arr.join(\"\");\n}\nexport function applyStyle(el: HTMLElement, style: IObject<any>) {\n    for (const name in style) {\n        el.style[name] = style[name];\n    }\n}\nexport function findIndexByProperty(selectedProperty: string, structures: ElementStructure[]) {\n    return structures.findIndex(\n        ({ dataset: { key } }) => key === selectedProperty,\n    );\n}\nexport function findStructureByProperty(selectedProperty: string, structures: ElementStructure[]) {\n    return structures.find(\n        ({ dataset: { key } }) => key === selectedProperty,\n    );\n}\n\nexport function createElement(structure: ElementStructure) {\n    const { selector, dataset, attr, style, html } = structure;\n\n    const classNames = selector.match(/\\.([^.#\\s])+/g) || [];\n    const tag = (selector.match(/^[^.#\\s]+/g) || [])[0] || \"div\";\n    const id = (selector.match(/#[^.#\\s]+/g) || [])[0] || \"\";\n    const el = document.createElement(tag);\n\n    id && (el.id = id.replace(/^#/g, \"\"));\n    el.className = classNames.map(name => `${PREFIX}${name.replace(/^\\./g, \"\")}`).join(\" \");\n\n    if (dataset) {\n        for (const name in dataset) {\n            el.setAttribute(`data-${name}`, dataset[name]);\n        }\n    }\n    if (attr) {\n        for (const name in attr) {\n            el.setAttribute(name, attr[name]);\n        }\n    }\n    if (style) {\n        applyStyle(el, style);\n    }\n    if (html) {\n        el.innerHTML = html;\n    }\n    return el;\n}\nexport function updateElement(prevStructure: ElementStructure, nextStructure: ElementStructure) {\n    const { dataset, attr, style, html, element } = nextStructure;\n    if (dataset) {\n        for (const name in dataset) {\n            element.setAttribute(`data-${name}`, dataset[name]);\n        }\n    }\n    if (attr) {\n        for (const name in attr) {\n            element.setAttribute(name, attr[name]);\n        }\n    }\n    style && applyStyle(element, style);\n    if (prevStructure.html !== nextStructure.html) {\n        element.innerHTML = html;\n    }\n}\nexport function keys(value: object) {\n    const arr = [];\n    for (const name in value) {\n        arr.push(name);\n    }\n    return arr;\n}\nexport function toValue(value: any) {\n    const type = typeof value;\n    if (type === \"object\") {\n        if (Array.isArray(value)) {\n            return `[${value.join(\", \")}]`;\n        }\n        return `{${keys(value).map(k => `${k}: ${toValue(value[k])}`).join(\", \")}}`;\n    }\n    return value;\n}\nexport function flatObject(obj: IObject<any>, newObj: IObject<any> = {}) {\n\n    for (const name in obj) {\n        const value = obj[name];\n\n        if (isObject(value)) {\n            const nextObj = flatObject(isFrame(value) ? value.get() : value);\n\n            for (const nextName in nextObj) {\n                newObj[`${name}///${nextName}`] = nextObj[nextName];\n            }\n        } else {\n            newObj[name] = value;\n        }\n    }\n    return newObj;\n}\n\nexport function getTarget<T extends HTMLElement>(target: T, conditionCallback: (el: Element) => boolean): T {\n    let parentTarget = target;\n\n    while (parentTarget && parentTarget !== document.body) {\n        if (conditionCallback(parentTarget)) {\n            return parentTarget;\n        }\n        parentTarget = parentTarget.parentNode as T;\n    }\n    return null;\n}\n\nexport function hasClass(target: Element, className: string) {\n    return hasClass2(target, `${PREFIX}${className}`);\n}\nexport function addClass(target: Element, className: string) {\n    return addClass2(target, `${PREFIX}${className}`);\n}\nexport function removeClass(target: Element, className: string) {\n    return removeClass2(target, `${PREFIX}${className}`);\n}\nexport function findStructure(\n    selector: string,\n    structure: ElementStructure | ElementStructure[],\n    multi: true,\n    arr?: ElementStructure[],\n): ElementStructure[];\nexport function findStructure(\n    selector: string,\n    structure: ElementStructure | ElementStructure[],\n    multi?: false,\n    arr?: ElementStructure[],\n): ElementStructure;\nexport function findStructure(\n    selector: string,\n    structure: ElementStructure | ElementStructure[],\n    multi: true | false,\n    arr?: ElementStructure[],\n): ElementStructure | ElementStructure[];\nexport function findStructure(\n    selector: string,\n    structure: ElementStructure | ElementStructure[],\n    multi: boolean = false,\n    arr: ElementStructure[] = [],\n): ElementStructure | ElementStructure[] {\n    if (isArray(structure)) {\n        const length = structure.length;\n\n        for (let i = 0; i < length; ++i) {\n            findStructure(selector, structure[i], multi, arr);\n        }\n    } else {\n        if (structure.selector === selector) {\n            arr.push(structure);\n        }\n        if (!multi && arr.length) {\n            return arr[0];\n        }\n        if (structure.children) {\n            findStructure(selector, structure.children, multi, arr);\n        }\n    }\n    return multi ? arr : arr[0];\n}\nexport function isScene(value: any): value is Scene {\n    return !!(value.constructor as typeof Scene).prototype.getItem;\n}\nexport function isSceneItem(value: any): value is SceneItem {\n    return !!(value.constructor as typeof SceneItem).prototype.getFrame;\n}\nexport function isFrame(value: any): value is Frame {\n    return !!(value.constructor as typeof Frame).prototype.toCSS;\n}\nexport function splitProperty(scene: Scene, property: string) {\n    const names = property.split(\"///\");\n    const length = names.length;\n    let item: Scene | SceneItem = scene;\n    let i;\n\n    for (i = 0; i < length; ++i) {\n        if (isSceneItem(item)) {\n            break;\n        }\n        item = scene.getItem(names[i]);\n    }\n    return {\n        item: item as SceneItem,\n        names: names.slice(0, i),\n        properties: names.slice(i),\n    };\n}\nexport function getSceneItem(scene: Scene, names: string[]): SceneItem {\n    return names.reduce<any>(\n        (nextScene, name) => nextScene.getItem(name),\n        scene,\n    );\n}\n\nexport function findElementIndexByPosition(elements: HTMLElement[], pos: number): number {\n    const length = elements.length;\n\n    for (let index = 0; index < length; ++index) {\n        const el = elements[index];\n        const box = el.getBoundingClientRect();\n        const top = box.top;\n        const bottom = top + box.height;\n\n        if (top <= pos && pos < bottom) {\n            return index;\n        }\n    }\n    return -1;\n}\n","import { now } from \"@daybrush/utils\";\n\nlet prevTime = 0;\nlet prevX = -1;\nlet prevY = -1;\n\nexport function dblCheck(\n    isDrag: boolean,\n    e: any,\n    clientX: number,\n    clientY: number,\n    callback: (e: any, clientX: number, clientY: number) => void,\n) {\n    const currentTime = now();\n\n    if (!isDrag) {\n        if (\n            prevX === clientX &&\n            prevY === clientY &&\n            currentTime - prevTime <= 500\n        ) {\n            callback(e, clientX, clientY);\n        }\n        prevX = clientX;\n        prevY = clientY;\n        prevTime = currentTime;\n    }\n}\n","import { getKeytimesStructure } from \"./KeytimesStructure\";\nimport { Ids, ElementStructure } from \"./types\";\n\nexport function getHeaderAreaStructure(ids: Ids, zoom: number, maxDuration: number, maxTime: number): ElementStructure {\n    return {\n        selector: \".header_area\",\n        ref: e => {\n            ids.keyframesScrollAreas = [];\n            ids.keyframesAreas = [];\n            ids.propertiesAreas = [];\n        },\n        children: [\n            {\n                ref: (e: ElementStructure) => {\n                    ids.propertiesAreas[0] = e;\n                },\n                selector: \".properties_area\",\n                children: [\n                    {\n                        selector: \".property\",\n                        html: \"Name\",\n                    },\n                ],\n            },\n            {\n                selector: \".values_area\",\n                children: {\n                    selector: \".value\",\n                    children: {\n                        key: \"add\",\n                        selector: \".add\",\n                        html: \"+\",\n                        ref: (e: ElementStructure) => {\n                            ids.addItem = e;\n                        },\n                    },\n                },\n            },\n            getKeytimesAreaStructure(ids, zoom, maxDuration, maxTime),\n        ],\n    };\n}\n\nexport function getKeytimesAreaStructure(\n    ids: Ids,\n    zoom: number,\n    maxDuration: number,\n    maxTime: number,\n): ElementStructure {\n    return {\n        ref: e => {\n            ids.keyframesAreas[0] = e;\n        },\n        selector: \".keyframes_area\",\n        children: {\n            style: {\n                minWidth: `${50 * maxTime}px`,\n                width: `${Math.min(maxDuration ? maxTime / maxDuration : 1, 2) * zoom * 100}%`,\n            },\n            dataset: {\n                width: Math.min(maxDuration ? maxTime / maxDuration : 1, 2),\n            },\n            ref: (e: ElementStructure) => {\n                ids.keyframesScrollAreas[0] = e;\n            },\n            selector: \".keyframes_scroll_area\",\n            children: {\n                ref: e => {\n                    ids.cursors = [];\n                },\n                selector: \".keyframes\",\n                children: [\n                    {\n                        ref: e => {\n                            ids.keytimesContainer = e;\n                        },\n                        selector: \".keyframes_container\",\n                        children: getKeytimesStructure(maxTime),\n                    },\n                    {\n                        selector: \".keyframe_cursor\",\n                        ref: e => {\n                            ids.cursors[0] = e;\n                        },\n                    },\n                ],\n            },\n        },\n    };\n}\n","export function getKeytimesStructure(maxTime: number) {\n    const keytimes = [];\n\n    for (let time = 0; time <= maxTime; ++time) {\n        keytimes.push({\n            key: time,\n            dataset: {\n                time,\n            },\n            selector: \".keytime\",\n            style: {\n                width: `${100 / maxTime}%`,\n            },\n            children: [\n                {\n                    selector: \"span\",\n                    html: `${time}`,\n                },\n                {selector: \".graduation.start\"},\n                {selector: \".graduation.quarter\"},\n                {selector: \".graduation.half\"},\n                {selector: \".graduation.quarter3\"},\n            ],\n        });\n    }\n    return keytimes;\n}\nexport function getLinesStructure(maxTime: number) {\n    const lines = [];\n\n    for (let time = 0; time <= maxTime; ++time) {\n        lines.push({\n            key: time,\n            selector: \".division_line\",\n            style: {\n                left: `${100 / maxTime * time}%`,\n            },\n        });\n    }\n    return lines;\n}\n","import { toValue, applyStyle, isSceneItem, isScene } from \"./utils\";\nimport { ElementStructure, Ids, TimelineInfo, PropertiesInfo } from \"./types\";\nimport { getLinesStructure } from \"./KeytimesStructure\";\nimport { isUndefined } from \"@daybrush/utils\";\n\nexport function updateKeyframesStructure(keyframes: ElementStructure[], maxTime: number) {\n    keyframes.forEach(keyframe => {\n        const { selector, dataset, style, element } = keyframe;\n        if (selector === \".keyframe\") {\n            style.left = `${dataset.time / maxTime * 100}%`;\n        } else {\n            style.left = `${dataset.from / maxTime * 100}%`,\n                style.width = `${(dataset.to - dataset.from) / maxTime * 100}%`;\n        }\n        applyStyle(element, style);\n    });\n}\n\nexport function getKeyframesAreaStructure(\n    ids: Ids,\n    keyframesList: ElementStructure[],\n    zoom: number,\n    maxDuration: number,\n    maxTime: number,\n): ElementStructure {\n    const width = Math.min(maxDuration ? maxTime / maxDuration : 1, 2);\n    return {\n        ref: e => {\n            ids.keyframesAreas[1] = e;\n        },\n        selector: \".keyframes_area\",\n        children: {\n            style: {\n                minWidth: `${50 * maxTime}px`,\n                width: `${width * zoom * 100}%`,\n            },\n            dataset: {\n                width,\n            },\n            ref: e => {\n                ids.keyframesScrollAreas[1] = e;\n            },\n            selector: \".keyframes_scroll_area\",\n            children: getKeyframesScrollAreaChildrenStructure(ids, keyframesList, maxTime),\n        },\n    };\n}\nexport function getKeyframesScrollAreaChildrenStructure(\n    ids: Ids,\n    keyframesList: ElementStructure[],\n    maxTime: number,\n): ElementStructure[] {\n    return [\n        ...keyframesList,\n        {\n            key: \"cursor\",\n            selector: \".keyframe_cursor\",\n            ref: e => {\n                ids.cursors[1] = e;\n            },\n        },\n        {\n            key: \"lineArea\",\n            ref: e => {\n                ids.lineArea = e;\n            },\n            selector: \".line_area\",\n            children: getLinesStructure(maxTime),\n        },\n    ];\n}\nexport function getKeyframesListStructure(\n    ids: Ids,\n    timelineInfo: TimelineInfo,\n    maxTime: number,\n): ElementStructure[] {\n    const keyframesList: ElementStructure[] = [];\n\n    for (const key in timelineInfo) {\n        const propertiesInfo = timelineInfo[key];\n        const keyframes = getKeyframesStructure(propertiesInfo, maxTime);\n\n        keyframesList.push({\n            ref: (e, i) => {\n                ids.keyframesList[i] = e;\n                ids.keyframesContainers[i] = e.children as ElementStructure;\n            },\n            selector: \".keyframes\",\n            key,\n            dataset: {\n                item: propertiesInfo.isItem ? \"1\" : \"0\",\n                key,\n            },\n            datas: propertiesInfo,\n            children: {\n                selector: \".keyframes_container\",\n                children: keyframes,\n            },\n        });\n    }\n    return keyframesList;\n}\nexport function getDelayFrameStructure(\n    time: number,\n    nextTime: number,\n    maxTime: number,\n): ElementStructure {\n    return {\n        selector: \".keyframe_delay\",\n        key: `delay${time},${nextTime}`,\n        datas: {\n            time: -1,\n        },\n        style: {\n            left: `${time / maxTime * 100}%`,\n            width: `${(nextTime - time) / maxTime * 100}%`,\n        },\n    };\n}\nexport function getKeyframesStructure(\n    propertiesInfo: PropertiesInfo,\n    maxTime: number,\n): ElementStructure[] {\n    const keyframeLines: ElementStructure[] = [];\n    const { item, frames, properties } = propertiesInfo;\n    const duration = item.getDuration();\n    const delayFrames: ElementStructure[] = [];\n    const isItScene = isScene(item);\n\n    const keyframes: ElementStructure[] = frames.map(([time, iterationTime, value], i): ElementStructure => {\n        const valueText = toValue(value);\n\n        if (frames[i + 1]) {\n            const [nextTime, nextIterationTime, nextValue] = frames[i + 1];\n            const nextValueText = toValue(nextValue);\n\n            if (\n                (iterationTime === 0 && nextIterationTime === 0)\n                || (iterationTime === duration && nextIterationTime === duration)\n            ) {\n                delayFrames.push(\n                    getDelayFrameStructure(time, nextTime, maxTime),\n                );\n            }\n            if (isItScene) {\n                if (valueText !== nextValueText) {\n                    return {\n                        selector: \".keyframe_group\",\n                        key: `group${time},${nextTime}`,\n                        datas: {\n                            time: `${time},${nextTime}`,\n                            from: time,\n                            to: nextTime,\n                        },\n                        dataset: {\n                            time,\n                        },\n                        style: {\n                            left: `${time / maxTime * 100}%`,\n                            width: `${(nextTime - time) / maxTime * 100}%`,\n                        },\n                    };\n                } else {\n                    return;\n                }\n            }\n            if (!isUndefined(value) && !isUndefined(nextValue) && valueText !== nextValueText) {\n                keyframeLines.push({\n                    selector: \".keyframe_line\",\n                    key: `line${time},${nextTime}`,\n                    datas: {\n                        time: `${time},${nextTime}`,\n                        from: time,\n                        to: nextTime,\n                    },\n                    style: {\n                        left: `${time / maxTime * 100}%`,\n                        width: `${(nextTime - time) / maxTime * 100}%`,\n                    },\n                });\n            }\n        }\n\n        if (isItScene) {\n            return;\n        }\n\n        return {\n            key: time,\n            selector: \".keyframe\",\n            dataset: {\n                time,\n            },\n            datas: {\n                time,\n                iterationTime,\n                value: valueText,\n            },\n            style: {\n                left: `${time / maxTime * 100}%`,\n            },\n            html: `${time} ${valueText}`,\n        };\n    }).filter(keyframe => keyframe);\n\n    return [...keyframes, ...delayFrames, ...keyframeLines];\n}\n","import { getKeyframesAreaStructure, getKeyframesListStructure } from \"./KeyframesStructure\";\nimport { ElementStructure, Ids, TimelineInfo } from \"./types\";\nimport { getPropertiesStructure } from \"./PropertiesStructure\";\nimport { getValuesStructure } from \"./ValuesStructure\";\n\nexport function getScrollAreaStructure(\n    ids: Ids,\n    timelineInfo: TimelineInfo,\n    zoom: number,\n    maxDuration: number,\n    maxTime: number,\n): ElementStructure {\n    const keyframesList: ElementStructure[] = getKeyframesListStructure(ids, timelineInfo, maxTime);\n\n    return {\n        ref: e => {\n            ids.scrollArea = e;\n            ids.keyframesList = [];\n            ids.keyframesContainers = [];\n        },\n        selector: \".scroll_area\",\n        children: [\n            {\n                ref: e => {\n                    ids.propertiesAreas[1] = e;\n                    ids.properties = [];\n                },\n                selector: \".properties_area\",\n                children: [\n                    {\n                        selector: \".properties_scroll_area\",\n                        children: getPropertiesStructure(ids, timelineInfo),\n                    },\n                ],\n            },\n            {\n                ref: e => {\n                    ids.valuesArea = e;\n                    ids.values = [];\n                },\n                selector: \".values_area\",\n                children: getValuesStructure(ids, timelineInfo),\n            },\n            getKeyframesAreaStructure(ids, keyframesList, zoom, maxDuration, maxTime),\n        ],\n    };\n}\n","import { ElementStructure, Ids, TimelineInfo } from \"./types\";\n\nexport function getPropertiesStructure(ids: Ids, timelineInfo: TimelineInfo) {\n    const properties: ElementStructure[] = [];\n\n    for (const key in timelineInfo) {\n        const propertiesInfo = timelineInfo[key];\n        const propertyNames = propertiesInfo.keys;\n        const length = propertyNames.length;\n        const id = propertyNames[length - 1];\n\n        properties.push({\n            ref: (e, i) => {\n                ids.properties[i] = e;\n            },\n            key,\n            selector: \".property\",\n            dataset: {\n                key,\n                object: propertiesInfo.isParent ? \"1\" : \"0\",\n                item: propertiesInfo.isItem ? \"1\" : \"0\",\n            },\n            datas: propertiesInfo,\n            style: {\n                paddingLeft: `${10 + (length - 1) * 20}px`,\n            },\n            children: [\n                { selector: \".arrow\" },\n                {\n                    selector: \"span\",\n                    html: id,\n                },\n                { selector: \".remove\" },\n            ],\n        });\n    }\n    return properties;\n}\n","import { isObject } from \"@daybrush/utils\";\nimport { Ids, ElementStructure, TimelineInfo } from \"./types\";\n\nexport function getValuesStructure(ids: Ids, timelineInfo: TimelineInfo): ElementStructure[] {\n    const values: ElementStructure[] = [];\n\n    for (const key in timelineInfo) {\n        const propertiesInfo = timelineInfo[key];\n        const frames = propertiesInfo.frames;\n        values.push({\n            ref: (e, i) => {\n                ids.values[i] = e;\n            },\n            key,\n            selector: \".value\",\n            dataset: {\n                key,\n                item: propertiesInfo.isItem ? \"1\" : \"0\",\n                object: propertiesInfo.isParent ? \"1\" : \"0\",\n            },\n            datas: propertiesInfo,\n            children: propertiesInfo.isParent\n            ? {\n                key: \"add\",\n                selector: \".add\",\n                html: \"+\",\n            }\n            : {\n                key: \"input\",\n                selector: \"input\",\n                attr: {\n                    value: frames[0] ? frames[0][1] : \"\",\n                },\n            },\n        });\n    }\n    return values;\n}\n","import Scene, { AnimatorState, SceneItem } from \"scenejs\";\nimport { ITERATION_COUNT, DELAY, PLAY_SPEED, DIRECTION, REVERSE, ALTERNATE, ALTERNATE_REVERSE } from \"./consts\";\nimport { TimelineInfo } from \"./types\";\nimport { isScene } from \"./utils\";\nimport { isUndefined, isObject } from \"@daybrush/utils\";\n\nexport const MAXIMUM = 1000000;\nexport function toFixed(num: number) {\n    return Math.round(num * MAXIMUM) / MAXIMUM;\n}\nexport function addEntry(entries: number[][], time: number, keytime: number) {\n    const prevEntry = entries[entries.length - 1];\n\n    (!prevEntry || prevEntry[0] !== time || prevEntry[1] !== keytime) &&\n        entries.push([toFixed(time), toFixed(keytime)]);\n}\nexport function dotNumber(a1: number, a2: number, b1: number, b2: number) {\n    return (a1 * b2 + a2 * b1) / (b1 + b2);\n  }\nexport function getEntries(times: number[], states: AnimatorState[]) {\n    if (!times.length) {\n        return [];\n    }\n    let entries = times.map(time => ([time, time]));\n    let nextEntries = [];\n    const firstEntry = entries[0];\n    if (firstEntry[0] !== 0 && states[states.length - 1][DELAY]) {\n        entries.unshift([0, 0]);\n    }\n\n    states.forEach(state => {\n        const iterationCount = state[ITERATION_COUNT] as number;\n        const delay = state[DELAY];\n        const playSpeed = state[PLAY_SPEED];\n        const direction = state[DIRECTION];\n        const intCount = Math.ceil(iterationCount);\n        const currentDuration = entries[entries.length - 1][0];\n        const length = entries.length;\n        const lastTime = currentDuration * iterationCount;\n\n        for (let i = 0; i < intCount; ++i) {\n            const isReverse =\n                direction === REVERSE ||\n                direction === ALTERNATE && i % 2 ||\n                direction === ALTERNATE_REVERSE && !(i % 2);\n\n            for (let j = 0; j < length; ++j) {\n                const entry = entries[isReverse ? length - j - 1 : j];\n                const time = entry[1];\n                const currentTime = currentDuration * i + (isReverse ? currentDuration - entry[0] : entry[0]);\n                const prevEntry = entries[isReverse ? length - j : j - 1];\n\n                if (currentTime > lastTime) {\n                    if (j !== 0) {\n                        const prevTime = currentDuration * i +\n                            (isReverse ? currentDuration - prevEntry[0] : prevEntry[0]);\n                        const divideTime = dotNumber(prevEntry[1], time, lastTime - prevTime, currentTime - lastTime);\n\n                        addEntry(nextEntries, (delay + currentDuration * iterationCount) / playSpeed, divideTime);\n                    }\n                    break;\n                } else if (currentTime === lastTime && nextEntries[nextEntries.length - 1][0] === lastTime + delay) {\n                    break;\n                }\n                addEntry(nextEntries, (delay + currentTime) / playSpeed, time);\n            }\n        }\n        // delay time\n        delay && nextEntries.unshift([0, nextEntries[0][1]]);\n\n        entries = nextEntries;\n        nextEntries = [];\n    });\n\n    return entries;\n}\nexport function getItemInfo(\n    timelineInfo: TimelineInfo,\n    items: Array<Scene | SceneItem>,\n    names: Array<string | number>,\n    item: SceneItem) {\n    item.update();\n    const times = item.times.slice();\n\n    const originalDuration = item.getDuration();\n    (!item.getFrame(0)) && times.unshift(0);\n    (!item.getFrame(originalDuration)) && times.push(originalDuration);\n    const entries = getEntries(times, items.slice(1).map(animator => animator.state).reverse());\n\n    (function getPropertyInfo(itemNames: any, ...properties: any[]) {\n        const frames = [];\n        const isParent = isObject(itemNames);\n        const isItem = properties.length === 0;\n        entries.forEach(([time, iterationTime]) => {\n            const value = item.get(iterationTime, ...properties);\n            if (isUndefined(value) && properties.length) {\n                return;\n            }\n            frames.push([time, iterationTime, value]);\n        });\n        const keys = [...names, ...properties];\n        const key = keys.join(\"///\");\n\n        if (key) {\n            timelineInfo[key] = {\n                key,\n                keys,\n                parentItem: null,\n                isParent,\n                isItem,\n                item,\n                names,\n                properties,\n                frames,\n            };\n        }\n        if (isParent) {\n            for (const property in itemNames) {\n                getPropertyInfo(itemNames[property], ...properties, property);\n            }\n        }\n    })(item.names);\n}\nexport function getTimelineInfo(scene: Scene | SceneItem): TimelineInfo {\n    const timelineInfo: TimelineInfo = {};\n    (function sceneForEach(...items: Array<Scene | SceneItem>) {\n        const length = items.length;\n        const lastItem = items[length - 1];\n        const names = items.slice(1).map(item => item.getId());\n        if (isScene(lastItem)) {\n            if (names.length) {\n                const key = names.join(\"///\");\n\n                const times = [0, lastItem.getDuration()];\n                const entries = getEntries(times, items.slice(1).map(animator => animator.state).reverse());\n                const frames = [];\n                entries.forEach(([time, iterationTime]) => {\n                    frames.push([time, iterationTime, iterationTime]);\n                });\n                timelineInfo[key] = {\n                    key,\n                    keys: names,\n                    isItem: true,\n                    isParent: true,\n                    parentItem: items[length - 2] as Scene,\n                    item: lastItem,\n                    names: [],\n                    properties: [],\n                    frames,\n                };\n            }\n            lastItem.forEach((item: Scene | SceneItem) => {\n                sceneForEach(...items, item);\n            });\n        } else {\n            getItemInfo(timelineInfo, items, names, lastItem);\n        }\n    })(scene);\n\n    console.log(timelineInfo);\n    return timelineInfo;\n}\n","import Scene, { SceneItem } from \"scenejs\";\nimport {\n    getTarget,\n    hasClass, removeClass, addClass,\n    flatObject, splitProperty, findElementIndexByPosition,\n    createElement, updateElement, findIndexByProperty, findStructure, numberFormat, isScene, findStructureByProperty,\n} from \"./utils\";\nimport { drag } from \"@daybrush/drag\";\nimport { CSS } from \"./consts\";\nimport { IObject, addEvent, isUndefined } from \"@daybrush/utils\";\nimport Axes, { PinchInput } from \"@egjs/axes\";\nimport { ElementStructure, Ids, PropertiesInfo, TimelineInfo } from \"./types\";\nimport { dblCheck } from \"./dblcheck\";\nimport KeyController from \"keycon\";\nimport DataDOM from \"data-dom\";\nimport { getHeaderAreaStructure, getKeytimesAreaStructure } from \"./HeaderAreaStructure\";\nimport { getScrollAreaStructure } from \"./ScrollAreaStructure\";\nimport { getControlAreaStructure } from \"./ControlAreaStructure\";\nimport Component from \"@egjs/component\";\nimport { getTimelineInfo } from \"./TimelineInfo\";\nimport { Info } from \"./Info\";\n\nlet isExportCSS = false;\n\nexport default class Timeline extends Component {\n    public scene: Scene | SceneItem;\n    public options: {\n        keyboard?: boolean,\n    };\n    private maxTime: number = 0;\n    private axes: Axes;\n    private selectedProperty: string = \"\";\n    private selectedTime: number = -1;\n    private keycon: KeyController;\n    private datadom: DataDOM<ElementStructure>;\n    private structure: ElementStructure;\n    private ids: Ids = {};\n    private timelineInfo: TimelineInfo;\n    constructor(scene: Scene | SceneItem, parentEl: HTMLElement, options: {\n        keyboard?: boolean,\n    } = {}) {\n        super();\n        this.options = {\n            keyboard: true,\n            ...options,\n        };\n        scene.finish();\n        this.scene = scene;\n        this.initStructure(scene, parentEl);\n        this.initEditor();\n        this.initScroll();\n        this.initWheelZoom();\n        this.initDragKeyframes();\n        this.initClickProperty();\n        this.initController();\n        this.initDragValues();\n        this.initKeyController();\n\n        this.setTime(0);\n\n        // new Info(this, parentEl);\n    }\n    public getElement() {\n        return this.structure.element;\n    }\n    // scene control\n    public prev() {\n        this.setTime(this.scene.getTime() - 0.05);\n    }\n    public next() {\n        this.setTime(this.scene.getTime() + 0.05);\n    }\n    public finish() {\n        this.scene.finish();\n    }\n    public togglePlay() {\n        const scene = this.scene;\n        if (scene.getPlayState() === \"running\") {\n            scene.pause();\n        } else {\n            scene.play();\n        }\n    }\n    public setTime(time: number) {\n        const scene = this.scene;\n        const direction = scene.getDirection();\n\n        if (direction === \"normal\" || direction === \"alternate\") {\n            scene.setTime(time);\n        } else {\n            scene.setTime(scene.getDuration() - time);\n        }\n    }\n    public update() {\n        const scene = this.scene;\n        this.timelineInfo = getTimelineInfo(scene);\n        const maxDuration = Math.ceil(scene.getDuration());\n        const maxTime = maxDuration;\n        let zoom = this.axes.get([\"zoom\"]).zoom;\n        const currentMaxTime = this.maxTime;\n        this.maxTime = maxTime;\n        const ids = this.ids;\n        const prevKeytimesArea = ids.keyframesAreas[0];\n        const nextZoom = currentMaxTime > 1 ? maxDuration / currentMaxTime : 1;\n\n        zoom = zoom * nextZoom;\n        this.axes.axm.set({ zoom });\n        // update keytimes\n        this.datadom.update(\n            prevKeytimesArea,\n            getKeytimesAreaStructure(ids, zoom, maxDuration, maxTime),\n        );\n\n        const nextScrollAreaStructure = getScrollAreaStructure(\n            ids,\n            this.timelineInfo,\n            this.axes.get([\"zoom\"]).zoom,\n            maxDuration, this.maxTime,\n        );\n\n        this.datadom.update(\n            ids.scrollArea,\n            nextScrollAreaStructure,\n        );\n        this.setTime(scene.getTime());\n    }\n    private newItem(scene: Scene) {\n        const name = prompt(\"Add Item\");\n\n        if (!name) {\n            return;\n        }\n        (this.scene as Scene).newItem(name);\n        this.update();\n    }\n    private newProperty(item: SceneItem, properties: string[]) {\n        const property = prompt(\"new property\");\n\n        if (!property) {\n            return;\n        }\n        item.set(item.getIterationTime(), ...properties, property, 0);\n        this.update();\n    }\n    // init\n    private initController() {\n        const ids = this.ids;\n        const playBtn = this.ids.playBtn.element;\n        const scene = this.scene;\n\n        this.ids.addItem.element.addEventListener(\"click\", e => {\n            if (isScene(this.scene)) {\n                this.newItem(this.scene);\n            } else {\n                this.newProperty(this.scene, []);\n            }\n        });\n        playBtn.addEventListener(\"click\", e => {\n            this.togglePlay();\n            e.preventDefault();\n        });\n        ids.unselectedArea.element.addEventListener(\"click\", e => {\n            this.select(\"\", -1);\n        });\n        ids.prevBtn.element.addEventListener(\"click\", e => {\n            this.prev();\n            e.preventDefault();\n        });\n        ids.nextBtn.element.addEventListener(\"click\", e => {\n            this.next();\n            e.preventDefault();\n        });\n        scene.on(\"play\", () => {\n            addClass(playBtn, \"pause\");\n            removeClass(playBtn, \"play\");\n            // playBtn.innerHTML = \"pause\";\n        });\n        scene.on(\"paused\", () => {\n            addClass(playBtn, \"play\");\n            removeClass(playBtn, \"pause\");\n            // playBtn.innerHTML = \"play\";\n        });\n        if (this.options.keyboard) {\n            new KeyController(ids.timeArea.element)\n            .keydown(e => {\n                !e.isToggle && e.inputEvent.stopPropagation();\n            })\n            .keyup(e => {\n                !e.isToggle && e.inputEvent.stopPropagation();\n            })\n            .keyup(\"enter\", e => {\n                // go to time\n                const element = ids.timeArea.element;\n                const value = (element as HTMLInputElement).value;\n                const result = /(\\d+):(\\d+):(\\d+)/g.exec(value);\n\n                if (!result) {\n                    return;\n                }\n                const minute = parseFloat(result[1]);\n                const second = parseFloat(result[2]);\n                const milisecond = parseFloat(`0.${result[3]}`);\n                const time = minute * 60 + second + milisecond;\n\n                this.setTime(time);\n            });\n        }\n    }\n    private initKeyController() {\n        const ids = this.ids;\n\n        window.addEventListener(\"blur\", () => {\n            removeClass(ids.timeline.element, \"alt\");\n        });\n\n        this.keycon = new KeyController()\n        .keydown(\"alt\", () => {\n            addClass(ids.timeline.element, \"alt\");\n        })\n        .keyup(\"alt\", () => {\n            removeClass(ids.timeline.element, \"alt\");\n        });\n\n        if (this.options.keyboard) {\n            this.keycon.keydown(\"space\", ({inputEvent}) => {\n                inputEvent.preventDefault();\n            })\n            .keydown(\"left\", e => {\n                this.prev();\n            })\n            .keydown(\"right\", e => {\n                this.next();\n            })\n            .keyup(\"backspace\", () => {\n                this.removeKeyframe(this.selectedProperty);\n            })\n            .keyup(\"esc\", () => {\n                this.finish();\n            })\n            .keyup(\"space\", () => {\n                this.togglePlay();\n            });\n        }\n    }\n    private initStructure(scene: Scene | SceneItem, parentEl: HTMLElement) {\n        this.timelineInfo = getTimelineInfo(scene);\n        const duration = Math.ceil(scene.getDuration());\n        const maxDuration = Math.ceil(duration);\n        const maxTime = maxDuration;\n        const ids = this.ids;\n        let timelineCSS: ElementStructure;\n\n        this.maxTime = maxTime;\n        if (!isExportCSS) {\n            timelineCSS = {\n                selector: \"style.style\",\n                html: CSS,\n            };\n            isExportCSS = true;\n        }\n\n        const structure: ElementStructure = {\n            selector: \".timeline\",\n            ref: e => {\n                ids.timeline = e;\n            },\n            children: [\n                timelineCSS,\n                getControlAreaStructure(ids),\n                getHeaderAreaStructure(ids, 1, maxDuration, maxTime),\n                getScrollAreaStructure(ids, this.timelineInfo, 1, maxDuration, maxTime),\n            ],\n        };\n        this.datadom = new DataDOM(\n            createElement,\n            updateElement,\n        );\n        this.structure = this.datadom.render(structure, parentEl);\n\n\n        // fold all\n        this.ids.properties.forEach((property, i) => {\n            const propertiesInfo = property.datas as PropertiesInfo;\n            const {keys, isParent} = propertiesInfo;\n            if (keys.length === 1 && isParent) {\n                this.fold(i);\n            }\n        });\n    }\n    private initScroll() {\n        const {\n            keyframesAreas,\n        } = this.ids;\n        let isScrollKeyframe = false;\n\n        const headerKeyframesArea = keyframesAreas[0].element;\n        const scrollKeyframesArea = keyframesAreas[1].element;\n        headerKeyframesArea.addEventListener(\"scroll\", () => {\n            if (isScrollKeyframe) {\n                isScrollKeyframe = false;\n            } else {\n                isScrollKeyframe = true;\n                scrollKeyframesArea.scrollLeft = headerKeyframesArea.scrollLeft;\n            }\n        });\n        scrollKeyframesArea.addEventListener(\"scroll\", () => {\n            if (isScrollKeyframe) {\n                isScrollKeyframe = false;\n            } else {\n                isScrollKeyframe = true;\n                headerKeyframesArea.scrollLeft = scrollKeyframesArea.scrollLeft;\n            }\n        });\n    }\n    private initWheelZoom() {\n        const ids = this.ids;\n        const keyframesScrollAreas = ids.keyframesScrollAreas;\n        const headerArea = keyframesScrollAreas[0].element;\n        const scrollArea = keyframesScrollAreas[1].element;\n\n        const axes = new Axes(\n            {\n                zoom: {\n                    range: [1, Infinity],\n                },\n            },\n            {},\n            { zoom: 1 },\n        );\n        axes.connect(\"zoom\", new PinchInput(scrollArea, {\n            scale: 0.1,\n            hammerManagerOptions: {\n                touchAction: \"auto\",\n            },\n        }));\n        axes.on(\"hold\", e => {\n            if (e.inputEvent) {\n                e.inputEvent.preventDefault();\n            }\n        });\n        axes.on(\"change\", e => {\n            const scale = ids.keyframesScrollAreas[0].dataset.width;\n            const width = e.pos.zoom * scale * 100;\n\n            ids.keyframesScrollAreas.forEach(({ element }) => {\n                element.style.width = `${width}%`;\n            });\n\n            if (e.inputEvent) {\n                e.inputEvent.preventDefault();\n            }\n        });\n\n        this.axes = axes;\n        headerArea.addEventListener(\"wheel\", e => {\n            const delta = e.deltaY;\n\n            axes.setBy({ zoom: delta / 5000 });\n            !e.deltaX && e.preventDefault();\n        });\n\n        addEvent(scrollArea, \"wheel\", e => {\n            if (!this.keycon.altKey) {\n                return;\n            }\n            e.preventDefault();\n            const delta = e.deltaY;\n\n            axes.setBy({ zoom: delta / 5000 });\n        });\n    }\n    private select(selectedProperty: string, keyframeTime?: number) {\n        const prevSelectedProperty = this.selectedProperty;\n        const prevSelectedTime = this.selectedTime;\n        const ids = this.ids;\n        const values = ids.values;\n        const properties = ids.properties;\n        const keyframesList = ids.keyframesList;\n\n        this.selectedProperty = selectedProperty;\n        this.scene.pause();\n        if (prevSelectedProperty) {\n            const prevSelectedIndex = findIndexByProperty(prevSelectedProperty, properties);\n\n            removeClass(properties[prevSelectedIndex].element, \"select\");\n            removeClass(values[prevSelectedIndex].element, \"select\");\n            removeClass(keyframesList[prevSelectedIndex].element, \"select\");\n\n            if (prevSelectedTime >= 0) {\n                const keyframes = ids.keyframesContainers[prevSelectedIndex].children as ElementStructure[];\n\n                keyframes.forEach(keyframe => {\n                    if (keyframe.datas.time === prevSelectedTime) {\n                        removeClass(keyframe.element, \"select\");\n                    }\n                });\n                this.selectedTime = -1;\n            }\n        }\n        let selectedItem: Scene | SceneItem = this.scene;\n        if (selectedProperty) {\n            if (document.activeElement) {\n                (document.activeElement as HTMLElement).blur();\n            }\n\n            const selectedIndex = findIndexByProperty(selectedProperty, properties);\n            addClass(properties[selectedIndex].element, \"select\");\n            addClass(values[selectedIndex].element, \"select\");\n            addClass(keyframesList[selectedIndex].element, \"select\");\n\n            selectedItem = (ids.keyframesList[selectedIndex].datas as PropertiesInfo).item;\n            if (keyframeTime >= 0) {\n                const selectedPropertyStructure = ids.keyframesContainers[selectedIndex];\n                const keyframes = selectedPropertyStructure.children as ElementStructure[];\n\n                keyframes.forEach(keyframe => {\n                    if (keyframe.datas.time === keyframeTime) {\n                        addClass(keyframe.element, \"select\");\n                    }\n                });\n                this.selectedTime = keyframeTime;\n            }\n        }\n        this.trigger(\"select\", {\n            selectedItem,\n            selectedProperty: this.selectedProperty,\n            selectedTime: this.selectedTime,\n            prevSelectedProperty,\n            prevSelectedTime,\n        });\n    }\n    private initClickProperty() {\n        const ids = this.ids;\n        const {\n            propertiesAreas,\n        } = ids;\n\n        propertiesAreas[1].element.addEventListener(\"click\", e => {\n            const properties = ids.properties.map(property => property.element);\n            const length = properties.length;\n            const arrow = getTarget(e.target as HTMLElement, el => hasClass(el, \"arrow\"));\n            const remove = getTarget(e.target as HTMLElement, el => hasClass(el, \"remove\"));\n            const target = getTarget(e.target as HTMLElement, el => hasClass(el, \"property\"));\n\n            if (!target) {\n                return;\n            }\n            const index = properties.indexOf(target);\n\n            if (index === -1) {\n                return;\n            }\n            const selectedProperty = ids.properties[index];\n            if (remove) {\n                this.remove(selectedProperty.datas as PropertiesInfo);\n            } else {\n                this.select(selectedProperty.dataset.key);\n\n                if (arrow) {\n                    this.fold(index);\n                }\n            }\n        });\n    }\n    private setInputs(obj: IObject<any>) {\n        const valuesArea = this.ids.valuesArea.element;\n        for (const name in obj) {\n            valuesArea.querySelector<HTMLInputElement>(`[data-key=\"${name}\"] input`).value = obj[name];\n        }\n    }\n    private moveCursor(time: number) {\n        const {cursors} = this.ids;\n        const maxTime = this.maxTime;\n        const px = 15 - 30 * time / maxTime;\n        const percent = 100 * time / maxTime;\n        const left = `calc(${percent}% + ${px}px)`;\n\n        cursors.forEach(cursor => {\n            cursor.element.style.left = left;\n        });\n    }\n    private initDragKeyframes() {\n        const ids = this.ids;\n        const {\n            scrollArea,\n            timeArea,\n            cursors,\n            keyframesAreas,\n            keyframesScrollAreas,\n        } = ids;\n        const scene = this.scene;\n\n        scene.on(\"animate\", e => {\n            const time = e.time;\n            this.moveCursor(time);\n            this.setInputs(flatObject(e.frames || e.frame.get()));\n            const minute = numberFormat(Math.floor(time / 60), 2);\n            const second = numberFormat(Math.floor(time % 60), 2);\n            const milisecond = numberFormat(Math.floor((time % 1) * 100), 3, true);\n            (timeArea.element as HTMLInputElement).value = `${minute}:${second}:${milisecond}`;\n        });\n        const getTime = (clientX: number) => {\n            const rect = keyframesScrollAreas[1].element.getBoundingClientRect();\n            const scrollAreaWidth = rect.width - 30;\n            const scrollAreaX = rect.left + 15;\n            const x = Math.min(scrollAreaWidth, Math.max(clientX - scrollAreaX, 0));\n            const percentage = x / scrollAreaWidth;\n            let time = this.maxTime * percentage;\n\n            time = Math.round(time * 20) / 20;\n\n            return time;\n        };\n        const move = (clientX: number) => {\n            this.setTime(getTime(clientX));\n        };\n        const click = (e, clientX, clientY) => {\n            const target = getTarget(e.target as HTMLElement, el => hasClass(el, \"keyframe\"));\n            const time = target ? parseFloat(target.getAttribute(\"data-time\")) : getTime(clientX);\n\n            this.setTime(time);\n            const list = ids.keyframesList;\n            const index = findElementIndexByPosition(\n                list.map(({element}) => element),\n                clientY,\n            );\n\n            if (index > -1) {\n                this.select(list[index].dataset.key, time);\n            }\n            e.preventDefault();\n        };\n        const dblclick = (e, clientX, clientY) => {\n            const list = ids.keyframesList;\n            const index = findElementIndexByPosition(\n                list.map(({element}) => element),\n                clientY,\n            );\n\n            if (index === -1) {\n                return;\n            }\n            this.addKeyframe(index, getTime(clientX));\n        };\n        drag(cursors[0].element, {\n            dragstart: ({inputEvent}) => {\n                inputEvent.stopPropagation();\n            },\n            drag: ({ clientX }) => {\n                move(clientX);\n            },\n            container: window,\n        });\n\n        let dragItem: Scene | SceneItem = null;\n        let dragDelay: number = 0;\n        let dragTarget: HTMLElement = null;\n        keyframesScrollAreas.forEach(({ element }) => {\n            drag(element, {\n                container: window,\n                dragstart: ({ inputEvent }) => {\n                    dragTarget = getTarget(inputEvent.target, el => hasClass(el, \"keyframe_group\"));\n                    if (dragTarget) {\n                        const properties = this.ids.properties;\n                        const keyframesTarget = getTarget(dragTarget, el => hasClass(el, \"keyframes\"));\n                        const key = keyframesTarget.getAttribute(\"data-key\");\n                        const property = findStructureByProperty(key, properties);\n                        const propertiesInfo = property.datas as PropertiesInfo;\n\n                        dragItem = propertiesInfo.item;\n                        dragDelay = dragItem.getDelay();\n                    }\n                },\n                drag: ({ distX, deltaX, deltaY, inputEvent }) => {\n                    if (dragTarget) {\n                        dragItem.setDelay(Math.max(dragDelay + distX / 100, 0));\n                        this.update();\n                    } else {\n                        keyframesAreas[1].element.scrollLeft -= deltaX;\n                        scrollArea.element.scrollTop -= deltaY;\n                        inputEvent.preventDefault();\n                    }\n                },\n                dragend: ({ isDrag, clientX, clientY, inputEvent }) => {\n                    dragTarget = null;\n                    dragItem = null;\n                    dragDelay = null;\n                    !isDrag && click(inputEvent, clientX, clientY);\n                    dblCheck(isDrag, inputEvent, clientX, clientY, dblclick);\n                },\n            });\n        });\n    }\n    private initDragValues() {\n        const ids = this.ids;\n        const element = ids.valuesArea.element;\n        let dragTarget: HTMLInputElement = null;\n        let dragTargetValue: any;\n\n        addEvent(element, \"click\", e => {\n            const addedElement = getTarget(dragTarget, el => hasClass(el, \"add\"));\n            if (!addedElement) {\n                return;\n            }\n            const valueElement = addedElement.parentElement as HTMLElement;\n            const index = findIndexByProperty(valueElement.getAttribute(\"data-key\"), ids.values);\n\n            if (index < 0) {\n                return;\n            }\n\n            const propertiesInfo = ids.properties[index].datas as PropertiesInfo;\n            const properties = propertiesInfo.properties.slice();\n            const item = propertiesInfo.item;\n\n            if (isScene(item)) {\n                this.newItem(item);\n            } else {\n                this.newProperty(item, properties);\n            }\n\n        });\n        drag(element, {\n            container: window,\n            dragstart: e => {\n                dragTarget = e.inputEvent.target;\n                dragTargetValue = dragTarget.value;\n\n                if (!this.keycon.altKey || !getTarget(dragTarget, el => el.nodeName === \"INPUT\")) {\n                    return false;\n                }\n            },\n            drag: e => {\n                const nextValue = dragTargetValue.replace(/-?\\d+/g, num => {\n                    return `${parseFloat(num) + Math.round(e.distX / 2)}`;\n                });\n\n                dragTarget.value = nextValue;\n            },\n            dragend: e => {\n                this.edit(dragTarget, dragTarget.value);\n            },\n        });\n    }\n    private addKeyframe(index: number, time: number) {\n        const list = this.ids.keyframesList;\n        const property = list[index].dataset.key;\n        const {item, properties} = list[index].datas as PropertiesInfo;\n\n        this.select(property, time);\n\n        const value = ((this.ids.values[index].children as ElementStructure).element as HTMLInputElement).value;\n\n        this.editKeyframe(index, value);\n    }\n    private fold(index: number, forceFold?: boolean) {\n        const ids = this.ids;\n        const {properties, values, keyframesList} = ids;\n        const selectedProperty = properties[index];\n        const length = properties.length;\n        let max;\n        for (max = index + 1; max < length; ++max) {\n            if (properties[max].datas.key.indexOf(selectedProperty.datas.key + \"///\") !== 0) {\n                break;\n            }\n        }\n        const foldProperties = properties.slice(index + 1, max);\n        const foldValues = values.slice(index + 1, max);\n        const foldKeyframesList = keyframesList.slice(index + 1, max);\n        const selectedElement = selectedProperty.element;\n        // true : unfold, false: fold\n        const isFold = isUndefined(forceFold) ? selectedElement.getAttribute(\"data-fold\") === \"1\" : forceFold;\n\n        selectedElement.setAttribute(\"data-fold\", isFold ? \"0\" : \"1\");\n        const foldFunction = (isFold ? removeClass : addClass);\n        const depth = selectedProperty.datas.keys.length;\n\n        foldProperties.forEach((property, i) => {\n            const datas = property.datas as PropertiesInfo;\n            if (depth + 1 < datas.keys.length) {\n                return;\n            }\n            foldFunction(property.element, \"fold\");\n            foldFunction(foldValues[i].element, \"fold\");\n            foldFunction(foldKeyframesList[i].element, \"fold\");\n            if (datas.isParent) {\n                if (!isFold) {\n                    this.fold(index + 1 + i, false);\n                } else {\n                    // always fold\n                    property.element.setAttribute(\"data-fold\", \"1\");\n                }\n            } else {\n                property.element.setAttribute(\"data-fold\", isFold ? \"0\" : \"1\");\n            }\n        });\n    }\n    private remove(propertiesInfo: PropertiesInfo) {\n        const {key, isItem, parentItem, item: targetItem, properties} = propertiesInfo;\n        if (isItem) {\n            let targetName: string = null;\n            parentItem.forEach((item, name) => {\n                if (item === targetItem) {\n                    targetName = name;\n                    return;\n                }\n            });\n            if (targetName != null) {\n                parentItem.removeItem(targetName);\n            }\n        } else {\n            const times = (targetItem as SceneItem).times;\n\n            times.forEach(time => {\n                (targetItem as SceneItem).remove(time, ...properties);\n            });\n        }\n        if (this.selectedProperty === key) {\n            this.selectedProperty = \"\";\n            this.selectedTime = -1;\n        }\n        this.update();\n    }\n    private removeKeyframe(property: string) {\n        const propertiesInfo = this.timelineInfo[property];\n        if (!property || !propertiesInfo || isScene(propertiesInfo.item)) {\n            return;\n        }\n\n        const properties = propertiesInfo.properties;\n        const item = propertiesInfo.item;\n\n        item.remove(item.getIterationTime(), ...properties);\n        this.update();\n    }\n    private editKeyframe(index: number, value: any) {\n        const ids = this.ids;\n        const isObjectData = ids.properties[index].dataset.object === \"1\";\n\n        if (isObjectData) {\n            return;\n        }\n        const propertiesInfo = ids.keyframesList[index].datas as PropertiesInfo;\n        const item = propertiesInfo.item;\n        const properties = propertiesInfo.properties;\n\n        item.set(item.getIterationTime(), ...properties, value);\n        this.update();\n    }\n    private restoreKeyframes() {\n        this.setTime(this.scene.getTime());\n    }\n    private edit(target: HTMLInputElement, value: any) {\n        const parentEl = getTarget(target, el => hasClass(el, \"value\"));\n\n        if (!parentEl) {\n            return;\n        }\n        const values = this.ids.values.map(({element}) => element);\n        const index = values.indexOf(parentEl);\n\n        if (index === -1) {\n            return;\n        }\n        this.editKeyframe(index, value);\n    }\n    private initEditor() {\n        const valuesArea = this.ids.valuesArea.element;\n\n        new KeyController(valuesArea)\n        .keydown(e => {\n            !e.isToggle && e.inputEvent.stopPropagation();\n        })\n        .keyup(e => {\n            !e.isToggle && e.inputEvent.stopPropagation();\n        })\n        .keyup(\"enter\", e => {\n            const target = e.inputEvent.target as HTMLInputElement;\n\n            this.edit(target, target.value);\n        })\n        .keyup(\"esc\", e => {\n            const target = e.inputEvent.target as HTMLInputElement;\n\n            target.blur();\n        });\n        valuesArea.addEventListener(\"focusout\", e => {\n            this.restoreKeyframes();\n        });\n    }\n}\n","import { Ids, ElementStructure } from \"./types\";\n\nexport function getControlAreaStructure(ids: Ids): ElementStructure {\n    return {\n        selector: \".header_area.control_area\",\n        children: [\n            {\n                selector: \".properties_area\",\n                ref: (e: ElementStructure) => {\n                    ids.unselectedArea = e;\n                },\n                children: {\n                    selector: \".property\",\n                },\n            },\n            {\n                selector: \".values_area\",\n                children: {\n                    selector: \".value\",\n                },\n            },\n            {\n                selector: \".keyframes_area\",\n                children: {\n                    selector: \".keyframes\",\n                    children: [\n                        {\n                            selector: \"input.time_area\",\n                            ref: (e: ElementStructure) => {\n                                ids.timeArea = e;\n                            },\n                            html: \"???\",\n                            // html: \"0\",\n                        },\n                        {\n                            selector: \".play_control_area\",\n                            children: [\n                                {\n                                    ref: (e: ElementStructure) => {\n                                        ids.prevBtn = e;\n                                    },\n                                    selector: \".control.prev\",\n                                },\n                                {\n                                    ref: (e: ElementStructure) => {\n                                        ids.playBtn = e;\n                                    },\n                                    selector: \".control.play\",\n                                },\n                                {\n                                    ref: (e: ElementStructure) => {\n                                        ids.nextBtn = e;\n                                    },\n                                    selector: \".control.next\",\n                                },\n                            ],\n                        },\n                    ],\n                },\n            },\n        ],\n    };\n}\n"],"names":["PREFIX","CSS","replace","DIRECTION","ITERATION_COUNT","DELAY","PLAY_SPEED","ALTERNATE","REVERSE","ALTERNATE_REVERSE","numberFormat","num","count","isRight","length","arr","push","i","join","applyStyle","el","style","name","findIndexByProperty","selectedProperty","structures","findIndex","_a","createElement","structure","selector","dataset","attr","html","classNames","match","tag","id","document","className","map","setAttribute","innerHTML","updateElement","prevStructure","nextStructure","element","toValue","value","Array","isArray","keys","k","getTarget","target","conditionCallback","parentTarget","body","parentNode","hasClass","hasClass2","addClass","addClass2","removeClass","removeClass2","isScene","constructor","prototype","getItem","findElementIndexByPosition","elements","pos","index","box","getBoundingClientRect","top","bottom","height","prevTime","prevX","prevY","getKeytimesAreaStructure","ids","zoom","maxDuration","maxTime","ref","e","keyframesAreas","children","minWidth","width","Math","min","keyframesScrollAreas","cursors","keytimesContainer","keytimes","time","key","getKeytimesStructure","getKeyframesAreaStructure","keyframesList","lineArea","lines","left","getLinesStructure","getKeyframesScrollAreaChildrenStructure","getKeyframesStructure","propertiesInfo","keyframeLines","item","frames","duration","getDuration","delayFrames","isItScene","iterationTime","valueText","_b","nextTime","nextIterationTime","nextValue","nextValueText","datas","getDelayFrameStructure","from","to","isUndefined","filter","keyframe","getScrollAreaStructure","timelineInfo","keyframes","keyframesContainers","isItem","getKeyframesListStructure","scrollArea","propertiesAreas","properties","propertyNames","object","isParent","paddingLeft","getPropertiesStructure","valuesArea","values","getValuesStructure","MAXIMUM","toFixed","round","addEntry","entries","keytime","prevEntry","getEntries","times","states","nextEntries","unshift","forEach","state","b1","b2","iterationCount","delay","playSpeed","direction","intCount","ceil","currentDuration","lastTime","isReverse","j","entry","currentTime","divideTime","getTimelineInfo","scene","sceneForEach","_i","items","lastItem","names","slice","getId","animator","reverse","frames_1","parentItem","update","originalDuration","getFrame","getPropertyInfo","itemNames","isObject","get","property","getItemInfo","console","log","isExportCSS","parentEl","options","_super","_this","keyboard","finish","initStructure","initEditor","initScroll","initWheelZoom","initDragKeyframes","initClickProperty","initController","initDragValues","initKeyController","setTime","tslib_1","this","getTime","getPlayState","pause","play","getDirection","axes","currentMaxTime","prevKeytimesArea","axm","set","datadom","nextScrollAreaStructure","prompt","newItem","getIterationTime","playBtn","addItem","addEventListener","newProperty","togglePlay","preventDefault","unselectedArea","select","prevBtn","prev","nextBtn","next","on","KeyController","timeArea","keydown","isToggle","inputEvent","stopPropagation","keyup","result","exec","parseFloat","window","timeline","keycon","removeKeyframe","timelineCSS","getControlAreaStructure","getHeaderAreaStructure","DataDOM","render","fold","isScrollKeyframe","headerKeyframesArea","scrollKeyframesArea","scrollLeft","headerArea","Axes","range","Infinity","connect","PinchInput","scale","hammerManagerOptions","touchAction","delta","deltaY","setBy","deltaX","addEvent","altKey","keyframeTime","prevSelectedProperty","prevSelectedTime","selectedTime","prevSelectedIndex","selectedItem","activeElement","blur","selectedIndex","trigger","arrow","remove","indexOf","obj","querySelector","cursor","moveCursor","setInputs","flatObject","newObj","nextObj","toCSS","nextName","frame","minute","floor","second","milisecond","clientX","rect","scrollAreaWidth","scrollAreaX","percentage","max","dblclick","clientY","addKeyframe","drag","dragstart","move","container","dragItem","dragDelay","dragTarget","find","findStructureByProperty","getAttribute","getDelay","distX","setDelay","scrollTop","dragend","isDrag","list","click","callback","now","dblCheck","dragTargetValue","addedElement","parentElement","nodeName","edit","editKeyframe","forceFold","foldProperties","foldValues","foldKeyframesList","selectedElement","isFold","foldFunction","depth","targetItem","targetName_1","removeItem","restoreKeyframes","Component"],"mappings":"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"}